
AlarmClock_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  0800602c  0800602c  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800602c  0800602c  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006034  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000018  08006048  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08006048  000081b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c97c  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002216  00000000  00000000  000149b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00016bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbd  00000000  00000000  00017ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001813a  00000000  00000000  00018685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fbf  00000000  00000000  000307bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8ee  00000000  00000000  0004177e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  000cd0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d1090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08005fe8 	.word	0x08005fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08005fe8 	.word	0x08005fe8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <ResetLeds>:
#include "4x_7-seg_display.h"


// Сбрасывает все светодиоды для отрисовки одной цифры
void ResetLeds(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <ResetLeds+0x50>)
 80009de:	f002 ff42 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <ResetLeds+0x54>)
 80009e8:	f002 ff3d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2120      	movs	r1, #32
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <ResetLeds+0x54>)
 80009f2:	f002 ff38 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	480a      	ldr	r0, [pc, #40]	@ (8000a24 <ResetLeds+0x50>)
 80009fc:	f002 ff33 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <ResetLeds+0x50>)
 8000a08:	f002 ff2d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2140      	movs	r1, #64	@ 0x40
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <ResetLeds+0x54>)
 8000a12:	f002 ff28 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <ResetLeds+0x54>)
 8000a1c:	f002 ff23 	bl	8003866 <HAL_GPIO_WritePin>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	40010800 	.word	0x40010800

08000a2c <SetLeds>:


// Зажигает нужные светодиоды для отрисовки одной цифры
void SetLeds(uint8_t number)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	switch (number)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b09      	cmp	r3, #9
 8000a3a:	f200 8189 	bhi.w	8000d50 <SetLeds+0x324>
 8000a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a44 <SetLeds+0x18>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a6d 	.word	0x08000a6d
 8000a48:	08000ab7 	.word	0x08000ab7
 8000a4c:	08000b01 	.word	0x08000b01
 8000a50:	08000b4b 	.word	0x08000b4b
 8000a54:	08000b95 	.word	0x08000b95
 8000a58:	08000bdf 	.word	0x08000bdf
 8000a5c:	08000c29 	.word	0x08000c29
 8000a60:	08000c73 	.word	0x08000c73
 8000a64:	08000cbd 	.word	0x08000cbd
 8000a68:	08000d07 	.word	0x08000d07
	{
		case 0:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	48ba      	ldr	r0, [pc, #744]	@ (8000d5c <SetLeds+0x330>)
 8000a72:	f002 fef8 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2101      	movs	r1, #1
 8000a7a:	48b9      	ldr	r0, [pc, #740]	@ (8000d60 <SetLeds+0x334>)
 8000a7c:	f002 fef3 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2120      	movs	r1, #32
 8000a84:	48b6      	ldr	r0, [pc, #728]	@ (8000d60 <SetLeds+0x334>)
 8000a86:	f002 feee 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	48b3      	ldr	r0, [pc, #716]	@ (8000d5c <SetLeds+0x330>)
 8000a90:	f002 fee9 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a9a:	48b0      	ldr	r0, [pc, #704]	@ (8000d5c <SetLeds+0x330>)
 8000a9c:	f002 fee3 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	48ae      	ldr	r0, [pc, #696]	@ (8000d60 <SetLeds+0x334>)
 8000aa6:	f002 fede 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	48ac      	ldr	r0, [pc, #688]	@ (8000d60 <SetLeds+0x334>)
 8000ab0:	f002 fed9 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000ab4:	e14d      	b.n	8000d52 <SetLeds+0x326>


		case 1:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	48a8      	ldr	r0, [pc, #672]	@ (8000d5c <SetLeds+0x330>)
 8000abc:	f002 fed3 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	48a6      	ldr	r0, [pc, #664]	@ (8000d60 <SetLeds+0x334>)
 8000ac6:	f002 fece 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	48a4      	ldr	r0, [pc, #656]	@ (8000d60 <SetLeds+0x334>)
 8000ad0:	f002 fec9 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	48a0      	ldr	r0, [pc, #640]	@ (8000d5c <SetLeds+0x330>)
 8000ada:	f002 fec4 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae4:	489d      	ldr	r0, [pc, #628]	@ (8000d5c <SetLeds+0x330>)
 8000ae6:	f002 febe 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	@ 0x40
 8000aee:	489c      	ldr	r0, [pc, #624]	@ (8000d60 <SetLeds+0x334>)
 8000af0:	f002 feb9 	bl	8003866 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2108      	movs	r1, #8
 8000af8:	4899      	ldr	r0, [pc, #612]	@ (8000d60 <SetLeds+0x334>)
 8000afa:	f002 feb4 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000afe:	e128      	b.n	8000d52 <SetLeds+0x326>


		case 2:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4895      	ldr	r0, [pc, #596]	@ (8000d5c <SetLeds+0x330>)
 8000b06:	f002 feae 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4894      	ldr	r0, [pc, #592]	@ (8000d60 <SetLeds+0x334>)
 8000b10:	f002 fea9 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2120      	movs	r1, #32
 8000b18:	4891      	ldr	r0, [pc, #580]	@ (8000d60 <SetLeds+0x334>)
 8000b1a:	f002 fea4 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	488e      	ldr	r0, [pc, #568]	@ (8000d5c <SetLeds+0x330>)
 8000b24:	f002 fe9f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b2e:	488b      	ldr	r0, [pc, #556]	@ (8000d5c <SetLeds+0x330>)
 8000b30:	f002 fe99 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	@ 0x40
 8000b38:	4889      	ldr	r0, [pc, #548]	@ (8000d60 <SetLeds+0x334>)
 8000b3a:	f002 fe94 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2108      	movs	r1, #8
 8000b42:	4887      	ldr	r0, [pc, #540]	@ (8000d60 <SetLeds+0x334>)
 8000b44:	f002 fe8f 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000b48:	e103      	b.n	8000d52 <SetLeds+0x326>


		case 3:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4883      	ldr	r0, [pc, #524]	@ (8000d5c <SetLeds+0x330>)
 8000b50:	f002 fe89 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4881      	ldr	r0, [pc, #516]	@ (8000d60 <SetLeds+0x334>)
 8000b5a:	f002 fe84 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	487f      	ldr	r0, [pc, #508]	@ (8000d60 <SetLeds+0x334>)
 8000b64:	f002 fe7f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	487b      	ldr	r0, [pc, #492]	@ (8000d5c <SetLeds+0x330>)
 8000b6e:	f002 fe7a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b78:	4878      	ldr	r0, [pc, #480]	@ (8000d5c <SetLeds+0x330>)
 8000b7a:	f002 fe74 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2140      	movs	r1, #64	@ 0x40
 8000b82:	4877      	ldr	r0, [pc, #476]	@ (8000d60 <SetLeds+0x334>)
 8000b84:	f002 fe6f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4874      	ldr	r0, [pc, #464]	@ (8000d60 <SetLeds+0x334>)
 8000b8e:	f002 fe6a 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000b92:	e0de      	b.n	8000d52 <SetLeds+0x326>


		case 4:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4870      	ldr	r0, [pc, #448]	@ (8000d5c <SetLeds+0x330>)
 8000b9a:	f002 fe64 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	486f      	ldr	r0, [pc, #444]	@ (8000d60 <SetLeds+0x334>)
 8000ba4:	f002 fe5f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2120      	movs	r1, #32
 8000bac:	486c      	ldr	r0, [pc, #432]	@ (8000d60 <SetLeds+0x334>)
 8000bae:	f002 fe5a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4869      	ldr	r0, [pc, #420]	@ (8000d5c <SetLeds+0x330>)
 8000bb8:	f002 fe55 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bc2:	4866      	ldr	r0, [pc, #408]	@ (8000d5c <SetLeds+0x330>)
 8000bc4:	f002 fe4f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2140      	movs	r1, #64	@ 0x40
 8000bcc:	4864      	ldr	r0, [pc, #400]	@ (8000d60 <SetLeds+0x334>)
 8000bce:	f002 fe4a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4862      	ldr	r0, [pc, #392]	@ (8000d60 <SetLeds+0x334>)
 8000bd8:	f002 fe45 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000bdc:	e0b9      	b.n	8000d52 <SetLeds+0x326>


		case 5:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	485e      	ldr	r0, [pc, #376]	@ (8000d5c <SetLeds+0x330>)
 8000be4:	f002 fe3f 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	485c      	ldr	r0, [pc, #368]	@ (8000d60 <SetLeds+0x334>)
 8000bee:	f002 fe3a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	485a      	ldr	r0, [pc, #360]	@ (8000d60 <SetLeds+0x334>)
 8000bf8:	f002 fe35 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4856      	ldr	r0, [pc, #344]	@ (8000d5c <SetLeds+0x330>)
 8000c02:	f002 fe30 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0c:	4853      	ldr	r0, [pc, #332]	@ (8000d5c <SetLeds+0x330>)
 8000c0e:	f002 fe2a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2140      	movs	r1, #64	@ 0x40
 8000c16:	4852      	ldr	r0, [pc, #328]	@ (8000d60 <SetLeds+0x334>)
 8000c18:	f002 fe25 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	484f      	ldr	r0, [pc, #316]	@ (8000d60 <SetLeds+0x334>)
 8000c22:	f002 fe20 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000c26:	e094      	b.n	8000d52 <SetLeds+0x326>


		case 6:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	484b      	ldr	r0, [pc, #300]	@ (8000d5c <SetLeds+0x330>)
 8000c2e:	f002 fe1a 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	484a      	ldr	r0, [pc, #296]	@ (8000d60 <SetLeds+0x334>)
 8000c38:	f002 fe15 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4847      	ldr	r0, [pc, #284]	@ (8000d60 <SetLeds+0x334>)
 8000c42:	f002 fe10 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4844      	ldr	r0, [pc, #272]	@ (8000d5c <SetLeds+0x330>)
 8000c4c:	f002 fe0b 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c56:	4841      	ldr	r0, [pc, #260]	@ (8000d5c <SetLeds+0x330>)
 8000c58:	f002 fe05 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2140      	movs	r1, #64	@ 0x40
 8000c60:	483f      	ldr	r0, [pc, #252]	@ (8000d60 <SetLeds+0x334>)
 8000c62:	f002 fe00 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	483d      	ldr	r0, [pc, #244]	@ (8000d60 <SetLeds+0x334>)
 8000c6c:	f002 fdfb 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000c70:	e06f      	b.n	8000d52 <SetLeds+0x326>


		case 7:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	4839      	ldr	r0, [pc, #228]	@ (8000d5c <SetLeds+0x330>)
 8000c78:	f002 fdf5 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4837      	ldr	r0, [pc, #220]	@ (8000d60 <SetLeds+0x334>)
 8000c82:	f002 fdf0 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4835      	ldr	r0, [pc, #212]	@ (8000d60 <SetLeds+0x334>)
 8000c8c:	f002 fdeb 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2102      	movs	r1, #2
 8000c94:	4831      	ldr	r0, [pc, #196]	@ (8000d5c <SetLeds+0x330>)
 8000c96:	f002 fde6 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca0:	482e      	ldr	r0, [pc, #184]	@ (8000d5c <SetLeds+0x330>)
 8000ca2:	f002 fde0 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	482d      	ldr	r0, [pc, #180]	@ (8000d60 <SetLeds+0x334>)
 8000cac:	f002 fddb 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	482a      	ldr	r0, [pc, #168]	@ (8000d60 <SetLeds+0x334>)
 8000cb6:	f002 fdd6 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000cba:	e04a      	b.n	8000d52 <SetLeds+0x326>


		case 8:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <SetLeds+0x330>)
 8000cc2:	f002 fdd0 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4825      	ldr	r0, [pc, #148]	@ (8000d60 <SetLeds+0x334>)
 8000ccc:	f002 fdcb 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	4822      	ldr	r0, [pc, #136]	@ (8000d60 <SetLeds+0x334>)
 8000cd6:	f002 fdc6 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2102      	movs	r1, #2
 8000cde:	481f      	ldr	r0, [pc, #124]	@ (8000d5c <SetLeds+0x330>)
 8000ce0:	f002 fdc1 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cea:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <SetLeds+0x330>)
 8000cec:	f002 fdbb 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2140      	movs	r1, #64	@ 0x40
 8000cf4:	481a      	ldr	r0, [pc, #104]	@ (8000d60 <SetLeds+0x334>)
 8000cf6:	f002 fdb6 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <SetLeds+0x334>)
 8000d00:	f002 fdb1 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000d04:	e025      	b.n	8000d52 <SetLeds+0x326>


		case 9:

			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <SetLeds+0x330>)
 8000d0c:	f002 fdab 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <SetLeds+0x334>)
 8000d16:	f002 fda6 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <SetLeds+0x334>)
 8000d20:	f002 fda1 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2102      	movs	r1, #2
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <SetLeds+0x330>)
 8000d2a:	f002 fd9c 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <SetLeds+0x330>)
 8000d36:	f002 fd96 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2140      	movs	r1, #64	@ 0x40
 8000d3e:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <SetLeds+0x334>)
 8000d40:	f002 fd91 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2108      	movs	r1, #8
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <SetLeds+0x334>)
 8000d4a:	f002 fd8c 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000d4e:	e000      	b.n	8000d52 <SetLeds+0x326>


		default:
		break;
 8000d50:	bf00      	nop
	}
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010c00 	.word	0x40010c00
 8000d60:	40010800 	.word	0x40010800

08000d64 <SetDigit>:
}


// Выбор разряда на панели для записи цифры
void SetDigit(uint8_t num_digit)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	switch (num_digit)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d862      	bhi.n	8000e3c <SetDigit+0xd8>
 8000d76:	a201      	add	r2, pc, #4	@ (adr r2, 8000d7c <SetDigit+0x18>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000db9 	.word	0x08000db9
 8000d84:	08000de5 	.word	0x08000de5
 8000d88:	08000e11 	.word	0x08000e11
	{
		case 1:

			HAL_GPIO_WritePin(Dig1_GPIO_Port, Dig1_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d92:	482d      	ldr	r0, [pc, #180]	@ (8000e48 <SetDigit+0xe4>)
 8000d94:	f002 fd67 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	482b      	ldr	r0, [pc, #172]	@ (8000e4c <SetDigit+0xe8>)
 8000d9e:	f002 fd62 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig3_GPIO_Port, Dig3_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2104      	movs	r1, #4
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <SetDigit+0xe8>)
 8000da8:	f002 fd5d 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig4_GPIO_Port, Dig4_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2102      	movs	r1, #2
 8000db0:	4826      	ldr	r0, [pc, #152]	@ (8000e4c <SetDigit+0xe8>)
 8000db2:	f002 fd58 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000db6:	e042      	b.n	8000e3e <SetDigit+0xda>


		case 2:

			HAL_GPIO_WritePin(Dig1_GPIO_Port, Dig1_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dbe:	4822      	ldr	r0, [pc, #136]	@ (8000e48 <SetDigit+0xe4>)
 8000dc0:	f002 fd51 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4820      	ldr	r0, [pc, #128]	@ (8000e4c <SetDigit+0xe8>)
 8000dca:	f002 fd4c 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig3_GPIO_Port, Dig3_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <SetDigit+0xe8>)
 8000dd4:	f002 fd47 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig4_GPIO_Port, Dig4_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2102      	movs	r1, #2
 8000ddc:	481b      	ldr	r0, [pc, #108]	@ (8000e4c <SetDigit+0xe8>)
 8000dde:	f002 fd42 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000de2:	e02c      	b.n	8000e3e <SetDigit+0xda>


		case 3:

			HAL_GPIO_WritePin(Dig1_GPIO_Port, Dig1_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dea:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <SetDigit+0xe4>)
 8000dec:	f002 fd3b 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4815      	ldr	r0, [pc, #84]	@ (8000e4c <SetDigit+0xe8>)
 8000df6:	f002 fd36 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig3_GPIO_Port, Dig3_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <SetDigit+0xe8>)
 8000e00:	f002 fd31 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig4_GPIO_Port, Dig4_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4810      	ldr	r0, [pc, #64]	@ (8000e4c <SetDigit+0xe8>)
 8000e0a:	f002 fd2c 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000e0e:	e016      	b.n	8000e3e <SetDigit+0xda>


		case 4:

			HAL_GPIO_WritePin(Dig1_GPIO_Port, Dig1_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <SetDigit+0xe4>)
 8000e18:	f002 fd25 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2110      	movs	r1, #16
 8000e20:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <SetDigit+0xe8>)
 8000e22:	f002 fd20 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig3_GPIO_Port, Dig3_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <SetDigit+0xe8>)
 8000e2c:	f002 fd1b 	bl	8003866 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Dig4_GPIO_Port, Dig4_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2102      	movs	r1, #2
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <SetDigit+0xe8>)
 8000e36:	f002 fd16 	bl	8003866 <HAL_GPIO_WritePin>

		break;
 8000e3a:	e000      	b.n	8000e3e <SetDigit+0xda>


		default:
		break;
 8000e3c:	bf00      	nop
	}
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40010800 	.word	0x40010800

08000e50 <PrintFigure>:


// Вывод цифры в указанном разряде
void PrintFigure(uint8_t digit, uint8_t figure)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	SetDigit(digit);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff7e 	bl	8000d64 <SetDigit>
	SetLeds(figure);
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fdde 	bl	8000a2c <SetLeds>
	HAL_Delay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f001 ffdd 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8000e76:	f7ff fdad 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f001 ffd8 	bl	8002e30 <HAL_Delay>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <PrintPoint>:
}


// Отрисовка точки
void PrintPoint(uint8_t digit)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	SetDigit(digit);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff65 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <PrintPoint+0x3c>)
 8000ea0:	f002 fce1 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f001 ffc3 	bl	8002e30 <HAL_Delay>
	HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	@ 0x80
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <PrintPoint+0x3c>)
 8000eb0:	f002 fcd9 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f001 ffbb 	bl	8002e30 <HAL_Delay>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <PrintSnakeMove_Direct>:


// Вывод пробегающей змейки слева направо
void PrintSnakeMove_Direct(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]

	for (i = 1; i < 5; i++)
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	e06d      	b.n	8000fb4 <PrintSnakeMove_Direct+0xec>
	{
		SetDigit(i);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff42 	bl	8000d64 <SetDigit>

		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee6:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000ee8:	f002 fcbd 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(150);
 8000eec:	2096      	movs	r0, #150	@ 0x96
 8000eee:	f001 ff9f 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8000ef2:	f7ff fd6f 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 ff9a 	bl	8002e30 <HAL_Delay>

		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f02:	4830      	ldr	r0, [pc, #192]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000f04:	f002 fcaf 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2140      	movs	r1, #64	@ 0x40
 8000f0c:	482e      	ldr	r0, [pc, #184]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f0e:	f002 fcaa 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(150);
 8000f12:	2096      	movs	r0, #150	@ 0x96
 8000f14:	f001 ff8c 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8000f18:	f7ff fd5c 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f001 ff87 	bl	8002e30 <HAL_Delay>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2101      	movs	r1, #1
 8000f26:	4827      	ldr	r0, [pc, #156]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000f28:	f002 fc9d 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f32:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000f34:	f002 fc97 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	4822      	ldr	r0, [pc, #136]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f3e:	f002 fc92 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(150);
 8000f42:	2096      	movs	r0, #150	@ 0x96
 8000f44:	f001 ff74 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8000f48:	f7ff fd44 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f001 ff6f 	bl	8002e30 <HAL_Delay>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2101      	movs	r1, #1
 8000f56:	481b      	ldr	r0, [pc, #108]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000f58:	f002 fc85 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4819      	ldr	r0, [pc, #100]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f62:	f002 fc80 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2140      	movs	r1, #64	@ 0x40
 8000f6a:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f6c:	f002 fc7b 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(150);
 8000f70:	2096      	movs	r0, #150	@ 0x96
 8000f72:	f001 ff5d 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8000f76:	f7ff fd2d 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f001 ff58 	bl	8002e30 <HAL_Delay>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <PrintSnakeMove_Direct+0xfc>)
 8000f86:	f002 fc6e 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f90:	f002 fc69 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <PrintSnakeMove_Direct+0x100>)
 8000f9a:	f002 fc64 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(150);
 8000f9e:	2096      	movs	r0, #150	@ 0x96
 8000fa0:	f001 ff46 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8000fa4:	f7ff fd16 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f001 ff41 	bl	8002e30 <HAL_Delay>
	for (i = 1; i < 5; i++)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d98e      	bls.n	8000ed8 <PrintSnakeMove_Direct+0x10>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40010800 	.word	0x40010800

08000fcc <PrintHi>:

// Вывод "HI" на дисплее
// Дополнительно: аргумент == 1 для дисплеев со светодиодами
// часов в центре - выводит смайлик
void PrintHi(uint8_t led_clock)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	SetDigit(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff fec4 	bl	8000d64 <SetDigit>

	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2101      	movs	r1, #1
 8000fe0:	482f      	ldr	r0, [pc, #188]	@ (80010a0 <PrintHi+0xd4>)
 8000fe2:	f002 fc40 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2120      	movs	r1, #32
 8000fea:	482d      	ldr	r0, [pc, #180]	@ (80010a0 <PrintHi+0xd4>)
 8000fec:	f002 fc3b 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff6:	482b      	ldr	r0, [pc, #172]	@ (80010a4 <PrintHi+0xd8>)
 8000ff8:	f002 fc35 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	4827      	ldr	r0, [pc, #156]	@ (80010a0 <PrintHi+0xd4>)
 8001002:	f002 fc30 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <PrintHi+0xd4>)
 800100c:	f002 fc2b 	bl	8003866 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 ff0d 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001016:	f7ff fcdd 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f001 ff08 	bl	8002e30 <HAL_Delay>

	SetDigit(2);
 8001020:	2002      	movs	r0, #2
 8001022:	f7ff fe9f 	bl	8000d64 <SetDigit>

	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800102c:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <PrintHi+0xd8>)
 800102e:	f002 fc1a 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2140      	movs	r1, #64	@ 0x40
 8001036:	481a      	ldr	r0, [pc, #104]	@ (80010a0 <PrintHi+0xd4>)
 8001038:	f002 fc15 	bl	8003866 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 fef7 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001042:	f7ff fcc7 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 fef2 	bl	8002e30 <HAL_Delay>

	if (led_clock == 1)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d121      	bne.n	8001096 <PrintHi+0xca>
	{
		SetDigit(3);
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fe86 	bl	8000d64 <SetDigit>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <PrintHi+0xd8>)
 800105e:	f002 fc02 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <PrintHi+0xd4>)
 8001068:	f002 fbfd 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <PrintHi+0xd4>)
 8001072:	f002 fbf8 	bl	8003866 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2102      	movs	r1, #2
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <PrintHi+0xd8>)
 800107c:	f002 fbf3 	bl	8003866 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 fed5 	bl	8002e30 <HAL_Delay>
		ResetLeds();
 8001086:	f7ff fca5 	bl	80009d4 <ResetLeds>
		HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f001 fed0 	bl	8002e30 <HAL_Delay>

		PrintPoint(2);
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff fef9 	bl	8000e88 <PrintPoint>
	}
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <PrintDegrees>:


// Вывод на дисплей градусов по Цельсию (символы)
void PrintDegrees(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	SetDigit(3);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f7ff fe59 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2101      	movs	r1, #1
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <PrintDegrees+0x88>)
 80010b8:	f002 fbd5 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2101      	movs	r1, #1
 80010c0:	481c      	ldr	r0, [pc, #112]	@ (8001134 <PrintDegrees+0x8c>)
 80010c2:	f002 fbd0 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	@ 0x40
 80010ca:	481a      	ldr	r0, [pc, #104]	@ (8001134 <PrintDegrees+0x8c>)
 80010cc:	f002 fbcb 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2108      	movs	r1, #8
 80010d4:	4817      	ldr	r0, [pc, #92]	@ (8001134 <PrintDegrees+0x8c>)
 80010d6:	f002 fbc6 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f001 fea8 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 80010e0:	f7ff fc78 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 fea3 	bl	8002e30 <HAL_Delay>

	SetDigit(4);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff fe3a 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <PrintDegrees+0x88>)
 80010f6:	f002 fbb6 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2102      	movs	r1, #2
 80010fe:	480c      	ldr	r0, [pc, #48]	@ (8001130 <PrintDegrees+0x88>)
 8001100:	f002 fbb1 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110a:	4809      	ldr	r0, [pc, #36]	@ (8001130 <PrintDegrees+0x88>)
 800110c:	f002 fbab 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <PrintDegrees+0x8c>)
 8001116:	f002 fba6 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f001 fe88 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001120:	f7ff fc58 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f001 fe83 	bl	8002e30 <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40010800 	.word	0x40010800

08001138 <decToBcd>:
//----------------------------< Часы DS3231 >----------------------------
#define DS3231_ADDRESS 0xD0

// Преобразование чисел из десятичной системы в двоичную
uint8_t decToBcd(int val)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (uint8_t) ((val/10*16) + (val%10));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <decToBcd+0x44>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1092      	asrs	r2, r2, #2
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <decToBcd+0x44>)
 8001158:	fb83 1302 	smull	r1, r3, r3, r2
 800115c:	1099      	asrs	r1, r3, #2
 800115e:	17d3      	asrs	r3, r2, #31
 8001160:	1ac9      	subs	r1, r1, r3
 8001162:	460b      	mov	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	1ad1      	subs	r1, r2, r3
 800116c:	b2cb      	uxtb	r3, r1
 800116e:	4403      	add	r3, r0
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	66666667 	.word	0x66666667

08001180 <bcdToDec>:


// Преобразование чисел из двоичной системы в десятичную
int bcdToDec(uint8_t val)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  return (int) ((val/16*10) + (val%16));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	461a      	mov	r2, r3
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4413      	add	r3, r2
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <Set_Time_ShortVersion>:


// Функция для установки начального времени DS3231 при калибровке
void Set_Time_ShortVersion(uint8_t min, uint8_t hour,
						   uint8_t dom, uint8_t month)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4603      	mov	r3, r0
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	460b      	mov	r3, r1
 80011c8:	717b      	strb	r3, [r7, #5]
 80011ca:	4613      	mov	r3, r2
 80011cc:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];

	set_time[0] = decToBcd(0);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ffb2 	bl	8001138 <decToBcd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffac 	bl	8001138 <decToBcd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffa6 	bl	8001138 <decToBcd>
 80011ec:	4603      	mov	r3, r0
 80011ee:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ffa1 	bl	8001138 <decToBcd>
 80011f6:	4603      	mov	r3, r0
 80011f8:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff9b 	bl	8001138 <decToBcd>
 8001202:	4603      	mov	r3, r0
 8001204:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8001206:	793b      	ldrb	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff95 	bl	8001138 <decToBcd>
 800120e:	4603      	mov	r3, r0
 8001210:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff90 	bl	8001138 <decToBcd>
 8001218:	4603      	mov	r3, r0
 800121a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800121c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2307      	movs	r3, #7
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2200      	movs	r2, #0
 8001230:	21d0      	movs	r1, #208	@ 0xd0
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <Set_Time_ShortVersion+0x90>)
 8001234:	f002 fc74 	bl	8003b20 <HAL_I2C_Mem_Write>
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	20000088 	.word	0x20000088

08001244 <Get_Time>:


// Чтение текущего времени с DS3231
// (не используемые данные закомменчены)
void Get_Time(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2307      	movs	r3, #7
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	463b      	mov	r3, r7
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2200      	movs	r2, #0
 800125c:	21d0      	movs	r1, #208	@ 0xd0
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <Get_Time+0x78>)
 8001260:	f002 fd58 	bl	8003d14 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 8001264:	783b      	ldrb	r3, [r7, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff8a 	bl	8001180 <bcdToDec>
 800126c:	4603      	mov	r3, r0
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <Get_Time+0x7c>)
 8001272:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff82 	bl	8001180 <bcdToDec>
 800127c:	4603      	mov	r3, r0
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <Get_Time+0x7c>)
 8001282:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff7a 	bl	8001180 <bcdToDec>
 800128c:	4603      	mov	r3, r0
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <Get_Time+0x7c>)
 8001292:	709a      	strb	r2, [r3, #2]
	//time.dayofweek = bcdToDec(get_time[3]);
	time.dayofmonth = bcdToDec(get_time[4]);
 8001294:	793b      	ldrb	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff72 	bl	8001180 <bcdToDec>
 800129c:	4603      	mov	r3, r0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <Get_Time+0x7c>)
 80012a2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff6a 	bl	8001180 <bcdToDec>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <Get_Time+0x7c>)
 80012b2:	715a      	strb	r2, [r3, #5]
	//time.year = bcdToDec(get_time[6]);
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000088 	.word	0x20000088
 80012c0:	2000006c 	.word	0x2000006c

080012c4 <Get_Temp>:


// Чтение текущей температуры с DS3231
float Get_Temp(void)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2302      	movs	r3, #2
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2211      	movs	r2, #17
 80012dc:	21d0      	movs	r1, #208	@ 0xd0
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <Get_Temp+0x64>)
 80012e0:	f002 fd18 	bl	8003d14 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 80012e4:	793b      	ldrb	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f882 	bl	80003f0 <__aeabi_i2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f87a 	bl	80003f0 <__aeabi_i2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <Get_Temp+0x68>)
 8001302:	f7ff fa09 	bl	8000718 <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ff23 	bl	8000158 <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fae5 	bl	80008e8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bdb0      	pop	{r4, r5, r7, pc}
 8001328:	20000088 	.word	0x20000088
 800132c:	40100000 	.word	0x40100000

08001330 <force_temp_conv>:


// Увеличение скорости обновления температуры
void force_temp_conv(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8001336:	2300      	movs	r3, #0
 8001338:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 800133a:	2300      	movs	r3, #0
 800133c:	71bb      	strb	r3, [r7, #6]

	// Чтение status register
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);
 800133e:	2364      	movs	r3, #100	@ 0x64
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	220f      	movs	r2, #15
 800134e:	21d0      	movs	r1, #208	@ 0xd0
 8001350:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <force_temp_conv+0x70>)
 8001352:	f002 fcdf 	bl	8003d14 <HAL_I2C_Mem_Read>

	if (!(status&0x04))
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d11b      	bne.n	8001398 <force_temp_conv+0x68>
	{
		// Чтение control register
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);
 8001360:	2364      	movs	r3, #100	@ 0x64
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	1dbb      	adds	r3, r7, #6
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	220e      	movs	r2, #14
 8001370:	21d0      	movs	r1, #208	@ 0xd0
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <force_temp_conv+0x70>)
 8001374:	f002 fcce 	bl	8003d14 <HAL_I2C_Mem_Read>

		// Запись в control register
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	220e      	movs	r2, #14
 8001390:	21d0      	movs	r1, #208	@ 0xd0
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <force_temp_conv+0x70>)
 8001394:	f002 fbc4 	bl	8003b20 <HAL_I2C_Mem_Write>
	}
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000088 	.word	0x20000088

080013a4 <DisplayDegrees>:

//----------------------------< Дисплей >----------------------------

// Отображение текущей температуры на дисплее
void DisplayDegrees(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	temperature = (int) Get_Temp();
 80013a8:	f7ff ff8c 	bl	80012c4 <Get_Temp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff faea 	bl	8000988 <__aeabi_f2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <DisplayDegrees+0x58>)
 80013b8:	6013      	str	r3, [r2, #0]

	PrintFigure(1, (uint8_t) temperature / 10);
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <DisplayDegrees+0x58>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <DisplayDegrees+0x5c>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fd3f 	bl	8000e50 <PrintFigure>
	PrintFigure(2, (uint8_t) temperature % 10);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <DisplayDegrees+0x58>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <DisplayDegrees+0x5c>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	08d9      	lsrs	r1, r3, #3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff fd2e 	bl	8000e50 <PrintFigure>
	PrintDegrees();
 80013f4:	f7ff fe58 	bl	80010a8 <PrintDegrees>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000074 	.word	0x20000074
 8001400:	cccccccd 	.word	0xcccccccd

08001404 <DisplayTime>:


// Отображение текущего времени на дисплее
void DisplayTime(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	PrintFigure(1, time.hour / 10);
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <DisplayTime+0x7c>)
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <DisplayTime+0x80>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fd19 	bl	8000e50 <PrintFigure>
	PrintFigure(2, time.hour % 10);
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <DisplayTime+0x7c>)
 8001420:	789a      	ldrb	r2, [r3, #2]
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <DisplayTime+0x80>)
 8001424:	fba3 1302 	umull	r1, r3, r3, r2
 8001428:	08d9      	lsrs	r1, r3, #3
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff fd09 	bl	8000e50 <PrintFigure>
	PrintFigure(3, time.minutes / 10);
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <DisplayTime+0x7c>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <DisplayTime+0x80>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	2003      	movs	r0, #3
 8001450:	f7ff fcfe 	bl	8000e50 <PrintFigure>
	PrintFigure(4, time.minutes % 10);
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <DisplayTime+0x7c>)
 8001456:	785a      	ldrb	r2, [r3, #1]
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <DisplayTime+0x80>)
 800145a:	fba3 1302 	umull	r1, r3, r3, r2
 800145e:	08d9      	lsrs	r1, r3, #3
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	2004      	movs	r0, #4
 8001470:	f7ff fcee 	bl	8000e50 <PrintFigure>
	PrintPoint(2);
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff fd07 	bl	8000e88 <PrintPoint>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000006c 	.word	0x2000006c
 8001484:	cccccccd 	.word	0xcccccccd

08001488 <DisplayDate>:


// Отображение текущей даты на дисплее
void DisplayDate(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	PrintFigure(1, time.dayofmonth / 10);
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <DisplayDate+0x7c>)
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <DisplayDate+0x80>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fcd7 	bl	8000e50 <PrintFigure>
	PrintFigure(2, time.dayofmonth % 10);
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <DisplayDate+0x7c>)
 80014a4:	791a      	ldrb	r2, [r3, #4]
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <DisplayDate+0x80>)
 80014a8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ac:	08d9      	lsrs	r1, r3, #3
 80014ae:	460b      	mov	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff fcc7 	bl	8000e50 <PrintFigure>
	PrintFigure(3, time.month / 10);
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <DisplayDate+0x7c>)
 80014c4:	795b      	ldrb	r3, [r3, #5]
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <DisplayDate+0x80>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	2003      	movs	r0, #3
 80014d4:	f7ff fcbc 	bl	8000e50 <PrintFigure>
	PrintFigure(4, time.month % 10);
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <DisplayDate+0x7c>)
 80014da:	795a      	ldrb	r2, [r3, #5]
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <DisplayDate+0x80>)
 80014de:	fba3 1302 	umull	r1, r3, r3, r2
 80014e2:	08d9      	lsrs	r1, r3, #3
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	2004      	movs	r0, #4
 80014f4:	f7ff fcac 	bl	8000e50 <PrintFigure>
	PrintPoint(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fcc5 	bl	8000e88 <PrintPoint>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000006c 	.word	0x2000006c
 8001508:	cccccccd 	.word	0xcccccccd

0800150c <AlarmControl>:

//----------------------------< Нормальные режимы >----------------------------

// Функция управления пьезопищалкой
void AlarmControl(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	 if (f_Alarm)
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <AlarmControl+0x30>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <AlarmControl+0x1c>
		 GPIOB->BSRR |= 0x4000;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <AlarmControl+0x34>)
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <AlarmControl+0x34>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6113      	str	r3, [r2, #16]
	 else
		 GPIOB->BSRR |= 0x40000000;
}
 8001526:	e005      	b.n	8001534 <AlarmControl+0x28>
		 GPIOB->BSRR |= 0x40000000;
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <AlarmControl+0x34>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <AlarmControl+0x34>)
 800152e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001532:	6113      	str	r3, [r2, #16]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	2000018e 	.word	0x2000018e
 8001540:	40010c00 	.word	0x40010c00

08001544 <ButtonPress>:


// Обработка нажатий на сенсорную кнопку
// (переключение режимов работы)
void ButtonPress(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	71fb      	strb	r3, [r7, #7]

	// Текущее время и
	// текущее состояние кнопки
	uint32_t ms = HAL_GetTick();
 800154e:	f001 fc65 	bl	8002e1c <HAL_GetTick>
 8001552:	6038      	str	r0, [r7, #0]
	button_cond = (GPIOC->IDR & 0x4000) >> 14;
 8001554:	4b94      	ldr	r3, [pc, #592]	@ (80017a8 <ButtonPress+0x264>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	0b9b      	lsrs	r3, r3, #14
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <ButtonPress+0x268>)
 8001564:	701a      	strb	r2, [r3, #0]

	// Если кнопка была нажата и
	// ранее не была нажата
	// и с последнего нажатия
	// прошло 100 мс (защита от дребезга)
	if (button_cond && !press_flag && (ms - last_press) > 100)
 8001566:	4b91      	ldr	r3, [pc, #580]	@ (80017ac <ButtonPress+0x268>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00f      	beq.n	800158e <ButtonPress+0x4a>
 800156e:	4b90      	ldr	r3, [pc, #576]	@ (80017b0 <ButtonPress+0x26c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10b      	bne.n	800158e <ButtonPress+0x4a>
 8001576:	4b8f      	ldr	r3, [pc, #572]	@ (80017b4 <ButtonPress+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d905      	bls.n	800158e <ButtonPress+0x4a>
	{
		press_flag = 1;
 8001582:	4b8b      	ldr	r3, [pc, #556]	@ (80017b0 <ButtonPress+0x26c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
		last_press = ms;
 8001588:	4a8a      	ldr	r2, [pc, #552]	@ (80017b4 <ButtonPress+0x270>)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6013      	str	r3, [r2, #0]
	}

	// Если кнопка зажата более 3 с
	if (button_cond && press_flag && (ms - last_press) > 3000)
 800158e:	4b87      	ldr	r3, [pc, #540]	@ (80017ac <ButtonPress+0x268>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d06b      	beq.n	800166e <ButtonPress+0x12a>
 8001596:	4b86      	ldr	r3, [pc, #536]	@ (80017b0 <ButtonPress+0x26c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d067      	beq.n	800166e <ButtonPress+0x12a>
 800159e:	4b85      	ldr	r3, [pc, #532]	@ (80017b4 <ButtonPress+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d95f      	bls.n	800166e <ButtonPress+0x12a>
	{
		long_press_flag = 1;
 80015ae:	4b82      	ldr	r3, [pc, #520]	@ (80017b8 <ButtonPress+0x274>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
		last_press = ms;
 80015b4:	4a7f      	ldr	r2, [pc, #508]	@ (80017b4 <ButtonPress+0x270>)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6013      	str	r3, [r2, #0]

		// Действия на долгое нажатие

		// Увеличение счётчика долгих касаний
		counts_long++;
 80015ba:	4b80      	ldr	r3, [pc, #512]	@ (80017bc <ButtonPress+0x278>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <ButtonPress+0x278>)
 80015c6:	701a      	strb	r2, [r3, #0]

		// Переход в режим калибровки
		// через 3 с после нажатия на кнопку
		if (counts_long == 1)
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <ButtonPress+0x278>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d119      	bne.n	8001606 <ButtonPress+0xc2>
		{
			// Переход в режим калибровки
			mode = 4;
 80015d2:	4b7b      	ldr	r3, [pc, #492]	@ (80017c0 <ButtonPress+0x27c>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	701a      	strb	r2, [r3, #0]

			// Сброс текущих цифр и разрядов дисплея
			for (i = 0; i < 4; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	e006      	b.n	80015ec <ButtonPress+0xa8>
				number[i] = 0;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a78      	ldr	r2, [pc, #480]	@ (80017c4 <ButtonPress+0x280>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < 4; i++)
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3301      	adds	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9f5      	bls.n	80015de <ButtonPress+0x9a>

			current_digit = 1;
 80015f2:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <ButtonPress+0x284>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
			current_number = 0;
 80015f8:	4b74      	ldr	r3, [pc, #464]	@ (80017cc <ButtonPress+0x288>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]

			// Настройка даты
			stage_calibration = 1;
 80015fe:	4b74      	ldr	r3, [pc, #464]	@ (80017d0 <ButtonPress+0x28c>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e033      	b.n	800166e <ButtonPress+0x12a>
		}

		// Выход из режима калибровки
		else
		if (counts_long == 2)
 8001606:	4b6d      	ldr	r3, [pc, #436]	@ (80017bc <ButtonPress+0x278>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d12e      	bne.n	800166e <ButtonPress+0x12a>
		{
			// Если введены дата и время
			if (stage_calibration == 2)
 8001610:	4b6f      	ldr	r3, [pc, #444]	@ (80017d0 <ButtonPress+0x28c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d124      	bne.n	8001662 <ButtonPress+0x11e>
			{
				// Установка параметров, если они введены корректно
				if (!(((calibration.month > 12) || (calibration.month < 1)) ||
 8001618:	4b6e      	ldr	r3, [pc, #440]	@ (80017d4 <ButtonPress+0x290>)
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d820      	bhi.n	8001662 <ButtonPress+0x11e>
 8001620:	4b6c      	ldr	r3, [pc, #432]	@ (80017d4 <ButtonPress+0x290>)
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <ButtonPress+0x11e>
				   ((calibration.dayofmonth > 31) || (calibration.dayofmonth < 1)) ||
 8001628:	4b6a      	ldr	r3, [pc, #424]	@ (80017d4 <ButtonPress+0x290>)
 800162a:	781b      	ldrb	r3, [r3, #0]
				if (!(((calibration.month > 12) || (calibration.month < 1)) ||
 800162c:	2b1f      	cmp	r3, #31
 800162e:	d818      	bhi.n	8001662 <ButtonPress+0x11e>
				   ((calibration.dayofmonth > 31) || (calibration.dayofmonth < 1)) ||
 8001630:	4b68      	ldr	r3, [pc, #416]	@ (80017d4 <ButtonPress+0x290>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <ButtonPress+0x11e>
				   ((calibration.hours > 23) || (calibration.hours < 0))	||
 8001638:	4b66      	ldr	r3, [pc, #408]	@ (80017d4 <ButtonPress+0x290>)
 800163a:	789b      	ldrb	r3, [r3, #2]
				   ((calibration.dayofmonth > 31) || (calibration.dayofmonth < 1)) ||
 800163c:	2b17      	cmp	r3, #23
 800163e:	d810      	bhi.n	8001662 <ButtonPress+0x11e>
				   ((calibration.minutes > 59) || (calibration.minutes < 0))))
 8001640:	4b64      	ldr	r3, [pc, #400]	@ (80017d4 <ButtonPress+0x290>)
 8001642:	78db      	ldrb	r3, [r3, #3]
				if (!(((calibration.month > 12) || (calibration.month < 1)) ||
 8001644:	2b3b      	cmp	r3, #59	@ 0x3b
 8001646:	d80c      	bhi.n	8001662 <ButtonPress+0x11e>
				{
					// Установка даты и времени
					Set_Time_ShortVersion(calibration.minutes,
 8001648:	4b62      	ldr	r3, [pc, #392]	@ (80017d4 <ButtonPress+0x290>)
 800164a:	78d8      	ldrb	r0, [r3, #3]
 800164c:	4b61      	ldr	r3, [pc, #388]	@ (80017d4 <ButtonPress+0x290>)
 800164e:	7899      	ldrb	r1, [r3, #2]
 8001650:	4b60      	ldr	r3, [pc, #384]	@ (80017d4 <ButtonPress+0x290>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b5f      	ldr	r3, [pc, #380]	@ (80017d4 <ButtonPress+0x290>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	f7ff fdaa 	bl	80011b0 <Set_Time_ShortVersion>
										  calibration.hours,
										  calibration.dayofmonth,
										  calibration.month);

					// Сброс флага - часы не откалиброваны
					f_ClockNotCalibrated = 0;
 800165c:	4b5e      	ldr	r3, [pc, #376]	@ (80017d8 <ButtonPress+0x294>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
				}
			}

			// Сброс счетчика
			counts_long = 0;
 8001662:	4b56      	ldr	r3, [pc, #344]	@ (80017bc <ButtonPress+0x278>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
				 В расширенном нормальном режиме индикация
				 постоянно меняется и выход из режима
				 калибровки определить проще)
			*/

			mode = 2;
 8001668:	4b55      	ldr	r3, [pc, #340]	@ (80017c0 <ButtonPress+0x27c>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
		}
	}

	// Если кнопка отпущена и
	// была нажата долгое время
	if (!button_cond && press_flag && long_press_flag)
 800166e:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <ButtonPress+0x268>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <ButtonPress+0x14e>
 8001676:	4b4e      	ldr	r3, [pc, #312]	@ (80017b0 <ButtonPress+0x26c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <ButtonPress+0x14e>
 800167e:	4b4e      	ldr	r3, [pc, #312]	@ (80017b8 <ButtonPress+0x274>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <ButtonPress+0x14e>
	{
		press_flag = 0;
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <ButtonPress+0x26c>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
		long_press_flag = 0;
 800168c:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <ButtonPress+0x274>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
	}

	// Если кнопка была отпущена и
	// было только короткое нажатие
	if (!button_cond && press_flag && !long_press_flag)
 8001692:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <ButtonPress+0x268>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80b0 	bne.w	80017fc <ButtonPress+0x2b8>
 800169c:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <ButtonPress+0x26c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80ab 	beq.w	80017fc <ButtonPress+0x2b8>
 80016a6:	4b44      	ldr	r3, [pc, #272]	@ (80017b8 <ButtonPress+0x274>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80a6 	bne.w	80017fc <ButtonPress+0x2b8>
	{
		press_flag = 0;
 80016b0:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <ButtonPress+0x26c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

		// Действия на короткое нажатие

		// Если установлен режим калибровки
		if (mode == 4)
 80016b6:	4b42      	ldr	r3, [pc, #264]	@ (80017c0 <ButtonPress+0x27c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11d      	bne.n	80016fc <ButtonPress+0x1b8>
		{
			// Сброс текущих цифр и разрядов дисплея
			for (i = 0; i < 4; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	e006      	b.n	80016d4 <ButtonPress+0x190>
				number[i] = 0;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	4a3e      	ldr	r2, [pc, #248]	@ (80017c4 <ButtonPress+0x280>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < 4; i++)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3301      	adds	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d9f5      	bls.n	80016c6 <ButtonPress+0x182>

			current_digit = 1;
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <ButtonPress+0x284>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
			current_number = 0;
 80016e0:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <ButtonPress+0x288>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

			// В режиме калибровки короткое
			// нажатие переключает этапы калибровки
			if (stage_calibration == 1)
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <ButtonPress+0x28c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d103      	bne.n	80016f6 <ButtonPress+0x1b2>
				stage_calibration = 2;
 80016ee:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <ButtonPress+0x28c>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e002      	b.n	80016fc <ButtonPress+0x1b8>
			else
				stage_calibration = 1;
 80016f6:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <ButtonPress+0x28c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
		}

		// Если часы откалиброваны и
		// установлен любой режим, кроме калибровки
		if ((!f_ClockNotCalibrated) && (mode != 4))
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <ButtonPress+0x294>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d17b      	bne.n	80017fc <ButtonPress+0x2b8>
 8001704:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <ButtonPress+0x27c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b04      	cmp	r3, #4
 800170c:	d076      	beq.n	80017fc <ButtonPress+0x2b8>
		{
			counts++;
 800170e:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <ButtonPress+0x298>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <ButtonPress+0x298>)
 800171a:	701a      	strb	r2, [r3, #0]

			switch (counts)
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <ButtonPress+0x298>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d021      	beq.n	800176a <ButtonPress+0x226>
 8001726:	2b03      	cmp	r3, #3
 8001728:	dc65      	bgt.n	80017f6 <ButtonPress+0x2b2>
 800172a:	2b01      	cmp	r3, #1
 800172c:	d002      	beq.n	8001734 <ButtonPress+0x1f0>
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <ButtonPress+0x1f8>
					}

				break;

				default:
				break;
 8001732:	e060      	b.n	80017f6 <ButtonPress+0x2b2>
					mode = 2;
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <ButtonPress+0x27c>)
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
				break;
 800173a:	e05f      	b.n	80017fc <ButtonPress+0x2b8>
					mode = 3;
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <ButtonPress+0x27c>)
 800173e:	2203      	movs	r2, #3
 8001740:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < 4; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	e006      	b.n	8001756 <ButtonPress+0x212>
						number[i] = 0;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a1e      	ldr	r2, [pc, #120]	@ (80017c4 <ButtonPress+0x280>)
 800174c:	2100      	movs	r1, #0
 800174e:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i < 4; i++)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3301      	adds	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d9f5      	bls.n	8001748 <ButtonPress+0x204>
					current_digit = 1;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <ButtonPress+0x284>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
					current_number = 0;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <ButtonPress+0x288>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
				break;
 8001768:	e048      	b.n	80017fc <ButtonPress+0x2b8>
					mode = 1;
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <ButtonPress+0x27c>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
					counts = 0;
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <ButtonPress+0x298>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
					if (current_digit == 4)
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <ButtonPress+0x284>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b04      	cmp	r3, #4
 800177e:	d13c      	bne.n	80017fa <ButtonPress+0x2b6>
						if (((alarm.hours == 88) && (alarm.minutes == 88)) ||
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <ButtonPress+0x29c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b58      	cmp	r3, #88	@ 0x58
 8001786:	d103      	bne.n	8001790 <ButtonPress+0x24c>
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <ButtonPress+0x29c>)
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	2b58      	cmp	r3, #88	@ 0x58
 800178e:	d007      	beq.n	80017a0 <ButtonPress+0x25c>
							((alarm.hours > 23) || (alarm.hours < 0))	||
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <ButtonPress+0x29c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
						if (((alarm.hours == 88) && (alarm.minutes == 88)) ||
 8001794:	2b17      	cmp	r3, #23
 8001796:	d803      	bhi.n	80017a0 <ButtonPress+0x25c>
							((alarm.minutes > 59) || (alarm.minutes < 0)))
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <ButtonPress+0x29c>)
 800179a:	785b      	ldrb	r3, [r3, #1]
							((alarm.hours > 23) || (alarm.hours < 0))	||
 800179c:	2b3b      	cmp	r3, #59	@ 0x3b
 800179e:	d923      	bls.n	80017e8 <ButtonPress+0x2a4>
							f_SetAlarm = 0;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <ButtonPress+0x2a0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	e022      	b.n	80017ee <ButtonPress+0x2aa>
 80017a8:	40011000 	.word	0x40011000
 80017ac:	20000038 	.word	0x20000038
 80017b0:	20000039 	.word	0x20000039
 80017b4:	2000003c 	.word	0x2000003c
 80017b8:	2000003a 	.word	0x2000003a
 80017bc:	20000186 	.word	0x20000186
 80017c0:	20000002 	.word	0x20000002
 80017c4:	20000040 	.word	0x20000040
 80017c8:	20000003 	.word	0x20000003
 80017cc:	20000183 	.word	0x20000183
 80017d0:	20000001 	.word	0x20000001
 80017d4:	2000007c 	.word	0x2000007c
 80017d8:	20000078 	.word	0x20000078
 80017dc:	20000185 	.word	0x20000185
 80017e0:	20000044 	.word	0x20000044
 80017e4:	20000184 	.word	0x20000184
							f_SetAlarm = 1;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <ButtonPress+0x2c0>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
						f_SaveAlarm = 1;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <ButtonPress+0x2c4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
				break;
 80017f4:	e001      	b.n	80017fa <ButtonPress+0x2b6>
				break;
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <ButtonPress+0x2b8>
				break;
 80017fa:	bf00      	nop
			}
		}
	}
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000184 	.word	0x20000184
 8001808:	20000190 	.word	0x20000190

0800180c <TurnEncoder>:
//----------------------------< Режим настройки >----------------------------

// Функция для определения поворотов энкодера
// и регулировки текущей цифры
void TurnEncoder(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	 // Вращение по часовой стрелке
	 if (t_ENCS1COUNTs > 0)
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <TurnEncoder+0x5c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00e      	beq.n	8001838 <TurnEncoder+0x2c>
	 {
		t_ENCS1COUNTs = 0;
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <TurnEncoder+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	801a      	strh	r2, [r3, #0]

		// Ограничитель цифр сверху
		if (current_number < 9)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <TurnEncoder+0x60>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b08      	cmp	r3, #8
 8001828:	d806      	bhi.n	8001838 <TurnEncoder+0x2c>
			current_number++;
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <TurnEncoder+0x60>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <TurnEncoder+0x60>)
 8001836:	701a      	strb	r2, [r3, #0]
	 }

	 // Вращение против часовой стрелки
	 if (t_ENCS2COUNTs > 0)
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <TurnEncoder+0x64>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00e      	beq.n	8001860 <TurnEncoder+0x54>
	 {
		t_ENCS2COUNTs = 0;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <TurnEncoder+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]

		// Ограничитель цифр снизу
		if (current_number > 0)
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <TurnEncoder+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <TurnEncoder+0x54>
			current_number--;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <TurnEncoder+0x60>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <TurnEncoder+0x60>)
 800185e:	701a      	strb	r2, [r3, #0]
	 }
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	2000017c 	.word	0x2000017c
 800186c:	20000183 	.word	0x20000183
 8001870:	2000017e 	.word	0x2000017e

08001874 <EncoderButtonPress>:

// Обработка нажатий на кнопку энкодера
// (смена разряда на дисплее в режиме настройки
// и отключение будильника в остальных режимах)
void EncoderButtonPress(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	 // Нажатие кнопки с антидребезгом
	 if (HAL_GPIO_ReadPin(Enc_Button_GPIO_Port, Enc_Button_Pin) == GPIO_PIN_RESET && f_EncPress)
 8001878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187c:	481f      	ldr	r0, [pc, #124]	@ (80018fc <EncoderButtonPress+0x88>)
 800187e:	f001 ffdb 	bl	8003838 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d126      	bne.n	80018d6 <EncoderButtonPress+0x62>
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <EncoderButtonPress+0x8c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d022      	beq.n	80018d6 <EncoderButtonPress+0x62>
	 {
		f_EncPress = 0;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <EncoderButtonPress+0x8c>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

		// Режим нормальный или
		// расширенный нормальный
		// (выключение пьезопищалки)
		if (mode < 3)
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <EncoderButtonPress+0x90>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d803      	bhi.n	80018a8 <EncoderButtonPress+0x34>
			f_Alarm = 0;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <EncoderButtonPress+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e011      	b.n	80018cc <EncoderButtonPress+0x58>
		// или режим калибровки
		else
		{
			// Смена разряда часов при
			// нажатии на кнопку энкодера
			current_digit++;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <EncoderButtonPress+0x98>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <EncoderButtonPress+0x98>)
 80018b4:	701a      	strb	r2, [r3, #0]

			// Разряды меняются от 1 до 4
			if (current_digit == 5)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <EncoderButtonPress+0x98>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d102      	bne.n	80018c6 <EncoderButtonPress+0x52>
				current_digit = 1;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <EncoderButtonPress+0x98>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]

			// Сброс текущей цифры
			current_number = 0;
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <EncoderButtonPress+0x9c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
		}

		time_EncPress = HAL_GetTick();
 80018cc:	f001 faa6 	bl	8002e1c <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <EncoderButtonPress+0xa0>)
 80018d4:	6013      	str	r3, [r2, #0]
	 }

	 if (!f_EncPress && (HAL_GetTick() - time_EncPress) > 300)
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <EncoderButtonPress+0x8c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10b      	bne.n	80018f6 <EncoderButtonPress+0x82>
 80018de:	f001 fa9d 	bl	8002e1c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <EncoderButtonPress+0xa0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80018ee:	d902      	bls.n	80018f6 <EncoderButtonPress+0x82>
	 {
		 f_EncPress = 1;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <EncoderButtonPress+0x8c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
	 }
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40010800 	.word	0x40010800
 8001900:	20000000 	.word	0x20000000
 8001904:	20000002 	.word	0x20000002
 8001908:	2000018e 	.word	0x2000018e
 800190c:	20000003 	.word	0x20000003
 8001910:	20000183 	.word	0x20000183
 8001914:	20000034 	.word	0x20000034

08001918 <BuildTimeAlarmClock>:


// Функция для сборки времени будильника
void BuildTimeAlarmClock(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	// number[0-1] - Часы
	// number[2-3] - Минуты

	alarm.hours = number[0] * 10 + number[1];
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <BuildTimeAlarmClock+0x40>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <BuildTimeAlarmClock+0x40>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	4413      	add	r3, r2
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <BuildTimeAlarmClock+0x44>)
 8001934:	701a      	strb	r2, [r3, #0]
	alarm.minutes = number[2] * 10 + number[3];
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <BuildTimeAlarmClock+0x40>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	461a      	mov	r2, r3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <BuildTimeAlarmClock+0x40>)
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	4413      	add	r3, r2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <BuildTimeAlarmClock+0x44>)
 800194e:	705a      	strb	r2, [r3, #1]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000040 	.word	0x20000040
 800195c:	20000044 	.word	0x20000044

08001960 <IndicationAlarmClock>:


// Индикация времени будильника
void IndicationAlarmClock(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	// Включение центральных светодиодов
	PrintPoint(2);
 8001964:	2002      	movs	r0, #2
 8001966:	f7ff fa8f 	bl	8000e88 <PrintPoint>

	// Вывод цифр на дисплей
	switch (current_digit)
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <IndicationAlarmClock+0x134>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	2b03      	cmp	r3, #3
 8001974:	f200 808c 	bhi.w	8001a90 <IndicationAlarmClock+0x130>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <IndicationAlarmClock+0x20>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	080019af 	.word	0x080019af
 8001988:	080019e3 	.word	0x080019e3
 800198c:	08001a2d 	.word	0x08001a2d
	{
		case 1:

			number[0] = current_number;
 8001990:	4b41      	ldr	r3, [pc, #260]	@ (8001a98 <IndicationAlarmClock+0x138>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001998:	701a      	strb	r2, [r3, #0]
			PrintFigure(current_digit, number[0]);
 800199a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <IndicationAlarmClock+0x134>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4a3e      	ldr	r2, [pc, #248]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fa52 	bl	8000e50 <PrintFigure>

		break;
 80019ac:	e070      	b.n	8001a90 <IndicationAlarmClock+0x130>

		case 2:

			number[1] = current_number;
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <IndicationAlarmClock+0x138>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019b6:	705a      	strb	r2, [r3, #1]
			PrintFigure(current_digit-1, number[0]);
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <IndicationAlarmClock+0x134>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4a36      	ldr	r2, [pc, #216]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fa41 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[1]);
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <IndicationAlarmClock+0x134>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4a31      	ldr	r2, [pc, #196]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019d6:	7852      	ldrb	r2, [r2, #1]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa38 	bl	8000e50 <PrintFigure>

		break;
 80019e0:	e056      	b.n	8001a90 <IndicationAlarmClock+0x130>

		case 3:

			number[2] = current_number;
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <IndicationAlarmClock+0x138>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019ea:	709a      	strb	r2, [r3, #2]
			PrintFigure(current_digit-2, number[0]);
 80019ec:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <IndicationAlarmClock+0x134>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3b02      	subs	r3, #2
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fa27 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[1]);
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a0e:	7852      	ldrb	r2, [r2, #1]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fa1c 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[2]);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a20:	7892      	ldrb	r2, [r2, #2]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fa13 	bl	8000e50 <PrintFigure>

		break;
 8001a2a:	e031      	b.n	8001a90 <IndicationAlarmClock+0x130>

		case 4:

			number[3] = current_number;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <IndicationAlarmClock+0x138>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a34:	70da      	strb	r2, [r3, #3]
			PrintFigure(current_digit-3, number[0]);
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa02 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-2, number[1]);
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3b02      	subs	r3, #2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a58:	7852      	ldrb	r2, [r2, #1]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f9f7 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[2]);
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a6e:	7892      	ldrb	r2, [r2, #2]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f9ec 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[3]);
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <IndicationAlarmClock+0x134>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <IndicationAlarmClock+0x13c>)
 8001a80:	78d2      	ldrb	r2, [r2, #3]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f9e3 	bl	8000e50 <PrintFigure>

			// Формирование времени будильника
			BuildTimeAlarmClock();
 8001a8a:	f7ff ff45 	bl	8001918 <BuildTimeAlarmClock>

		break;
 8001a8e:	bf00      	nop
	}
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000003 	.word	0x20000003
 8001a98:	20000183 	.word	0x20000183
 8001a9c:	20000040 	.word	0x20000040

08001aa0 <PrepareDataFlash>:

//----------------------------< Запись на Flash >----------------------------

// Подготовка данных для записи на Flash
void PrepareDataFlash(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	write_alarm[0] = (uint32_t) alarm.hours;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <PrepareDataFlash+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <PrepareDataFlash+0x24>)
 8001aac:	601a      	str	r2, [r3, #0]
	write_alarm[1] = (uint32_t) alarm.minutes;
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <PrepareDataFlash+0x20>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <PrepareDataFlash+0x24>)
 8001ab6:	605a      	str	r2, [r3, #4]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000044 	.word	0x20000044
 8001ac4:	20000048 	.word	0x20000048

08001ac8 <EraseFlash>:


// Очистка последней страницы
void EraseFlash(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	// Структура для очистки flash
	static FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; 	// постраничная очистка
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <EraseFlash+0x44>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = 0x0801FC00; 			// адрес последней страницы №127
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <EraseFlash+0x44>)
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <EraseFlash+0x48>)
 8001ad8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;                       	// кол-во страниц для стирания
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <EraseFlash+0x44>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

	// Переменная, в которую запишется адрес
	// страницы при неудачном стирании
	uint32_t page_error = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]

	// Разблокировка flash
	HAL_FLASH_Unlock();
 8001ae4:	f001 fb94 	bl	8003210 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <EraseFlash+0x44>)
 8001aee:	f001 fc77 	bl	80033e0 <HAL_FLASHEx_Erase>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <EraseFlash+0x36>
	{
		// Установка флага ошибки при работе с Flash
		f_FlashError = 1;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <EraseFlash+0x4c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
	}

	// Блокировка flash
	HAL_FLASH_Lock();
 8001afe:	f001 fbad 	bl	800325c <HAL_FLASH_Lock>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000016c 	.word	0x2000016c
 8001b10:	0801fc00 	.word	0x0801fc00
 8001b14:	20000068 	.word	0x20000068

08001b18 <WriteFlash>:


// Запись на последнюю страницу
void WriteFlash(void)
{
 8001b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]

	// Адрес начала последней страницы №127
	uint32_t address = 0x0801FC00;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <WriteFlash+0x9c>)
 8001b26:	603b      	str	r3, [r7, #0]

	// Подготовка данных для записи
	PrepareDataFlash();
 8001b28:	f7ff ffba 	bl	8001aa0 <PrepareDataFlash>

	// Очистка страницы
	EraseFlash();
 8001b2c:	f7ff ffcc 	bl	8001ac8 <EraseFlash>

	// Разблокировка flash
	HAL_FLASH_Unlock();
 8001b30:	f001 fb6e 	bl	8003210 <HAL_FLASH_Unlock>

	// Запись параметров: часы, минуты,
	// флаг установки будильника
	for (i = 0; i < 3; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e018      	b.n	8001b6c <WriteFlash+0x54>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, write_alarm[i]) != HAL_OK)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <WriteFlash+0xa0>)
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	2200      	movs	r2, #0
 8001b44:	4698      	mov	r8, r3
 8001b46:	4691      	mov	r9, r2
 8001b48:	4642      	mov	r2, r8
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f001 faee 	bl	8003130 <HAL_FLASH_Program>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <WriteFlash+0x48>
		{
			// Установка флага ошибки при работе с Flash
			f_FlashError = 1;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <WriteFlash+0xa4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		}

		address += 4;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 3; i++)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d9e3      	bls.n	8001b3a <WriteFlash+0x22>
	}

	// Расчёт CRC32
	write_alarm[3] = HAL_CRC_Calculate(&hcrc, (uint32_t*) 0x0801FC00, 3);
 8001b72:	2203      	movs	r2, #3
 8001b74:	490f      	ldr	r1, [pc, #60]	@ (8001bb4 <WriteFlash+0x9c>)
 8001b76:	4812      	ldr	r0, [pc, #72]	@ (8001bc0 <WriteFlash+0xa8>)
 8001b78:	f001 faa7 	bl	80030ca <HAL_CRC_Calculate>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <WriteFlash+0xa0>)
 8001b80:	60d3      	str	r3, [r2, #12]

	// Запись CRC32
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, write_alarm[3]) != HAL_OK)
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <WriteFlash+0xa0>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	461c      	mov	r4, r3
 8001b8a:	4615      	mov	r5, r2
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	462b      	mov	r3, r5
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	2002      	movs	r0, #2
 8001b94:	f001 facc 	bl	8003130 <HAL_FLASH_Program>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <WriteFlash+0x8c>
	{
		// Установка флага ошибки при работе с Flash
		f_FlashError = 1;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <WriteFlash+0xa4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
	}

	// Блокировка flash
	HAL_FLASH_Lock();
 8001ba4:	f001 fb5a 	bl	800325c <HAL_FLASH_Lock>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0801fc00 	.word	0x0801fc00
 8001bb8:	20000048 	.word	0x20000048
 8001bbc:	20000068 	.word	0x20000068
 8001bc0:	20000080 	.word	0x20000080

08001bc4 <ReadFlash>:


// Чтение последней страницы
void ReadFlash(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]

	// Рассчитанное значение CRC32
	uint32_t crc = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]

	// Адрес начала последней страницы №127
	uint32_t address = 0x0801FC00;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <ReadFlash+0x88>)
 8001bd4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < 4; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e00b      	b.n	8001bf4 <ReadFlash+0x30>
	{
		read_alarm[i] = *(uint32_t*) address;
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	491b      	ldr	r1, [pc, #108]	@ (8001c50 <ReadFlash+0x8c>)
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		address += 4;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3304      	adds	r3, #4
 8001bec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 4; i++)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d9f0      	bls.n	8001bdc <ReadFlash+0x18>
	}

	// Расчёт CRC32
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) 0x0801FC00, 3);
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	4913      	ldr	r1, [pc, #76]	@ (8001c4c <ReadFlash+0x88>)
 8001bfe:	4815      	ldr	r0, [pc, #84]	@ (8001c54 <ReadFlash+0x90>)
 8001c00:	f001 fa63 	bl	80030ca <HAL_CRC_Calculate>
 8001c04:	6078      	str	r0, [r7, #4]

	// Если считанное с Flash значение
	// CRC32 и рассчитанное совпадают
	if (read_alarm[3] == crc)
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <ReadFlash+0x8c>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d118      	bne.n	8001c42 <ReadFlash+0x7e>
	{
		// Если будильник уже установлен
		if (read_alarm[2] == 1)
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <ReadFlash+0x8c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10d      	bne.n	8001c34 <ReadFlash+0x70>
		{
			f_SetAlarm = 1;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <ReadFlash+0x94>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]

			// Сохранение данных из flash
			alarm.hours = (uint8_t) read_alarm[0];
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <ReadFlash+0x8c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <ReadFlash+0x98>)
 8001c26:	701a      	strb	r2, [r3, #0]
			alarm.minutes = (uint8_t) read_alarm[1];
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <ReadFlash+0x8c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <ReadFlash+0x98>)
 8001c30:	705a      	strb	r2, [r3, #1]

		else
		if (read_alarm[2] == 0)
			f_SetAlarm = 0;
	}
}
 8001c32:	e006      	b.n	8001c42 <ReadFlash+0x7e>
		if (read_alarm[2] == 0)
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <ReadFlash+0x8c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <ReadFlash+0x7e>
			f_SetAlarm = 0;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <ReadFlash+0x94>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0801fc00 	.word	0x0801fc00
 8001c50:	20000058 	.word	0x20000058
 8001c54:	20000080 	.word	0x20000080
 8001c58:	20000184 	.word	0x20000184
 8001c5c:	20000044 	.word	0x20000044

08001c60 <IndicationFlashError>:


// Индикация при ошибках в работе с Flash
// (вывод на дисплей "FLSH")
void IndicationFlashError(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	// F
	SetDigit(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f87d 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4840      	ldr	r0, [pc, #256]	@ (8001d70 <IndicationFlashError+0x110>)
 8001c70:	f001 fdf9 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c7a:	483d      	ldr	r0, [pc, #244]	@ (8001d70 <IndicationFlashError+0x110>)
 8001c7c:	f001 fdf3 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2140      	movs	r1, #64	@ 0x40
 8001c84:	483b      	ldr	r0, [pc, #236]	@ (8001d74 <IndicationFlashError+0x114>)
 8001c86:	f001 fdee 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4839      	ldr	r0, [pc, #228]	@ (8001d74 <IndicationFlashError+0x114>)
 8001c90:	f001 fde9 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f001 f8cb 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001c9a:	f7fe fe9b 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f001 f8c6 	bl	8002e30 <HAL_Delay>

	// L
	SetDigit(2);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7ff f85d 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2102      	movs	r1, #2
 8001cae:	4830      	ldr	r0, [pc, #192]	@ (8001d70 <IndicationFlashError+0x110>)
 8001cb0:	f001 fdd9 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cba:	482d      	ldr	r0, [pc, #180]	@ (8001d70 <IndicationFlashError+0x110>)
 8001cbc:	f001 fdd3 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2140      	movs	r1, #64	@ 0x40
 8001cc4:	482b      	ldr	r0, [pc, #172]	@ (8001d74 <IndicationFlashError+0x114>)
 8001cc6:	f001 fdce 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f001 f8b0 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001cd0:	f7fe fe80 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f001 f8ab 	bl	8002e30 <HAL_Delay>

	// S
	SetDigit(3);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f7ff f842 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4822      	ldr	r0, [pc, #136]	@ (8001d70 <IndicationFlashError+0x110>)
 8001ce6:	f001 fdbe 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2120      	movs	r1, #32
 8001cee:	4821      	ldr	r0, [pc, #132]	@ (8001d74 <IndicationFlashError+0x114>)
 8001cf0:	f001 fdb9 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	481d      	ldr	r0, [pc, #116]	@ (8001d70 <IndicationFlashError+0x110>)
 8001cfa:	f001 fdb4 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2140      	movs	r1, #64	@ 0x40
 8001d02:	481c      	ldr	r0, [pc, #112]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d04:	f001 fdaf 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4819      	ldr	r0, [pc, #100]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d0e:	f001 fdaa 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f001 f88c 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001d18:	f7fe fe5c 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f001 f887 	bl	8002e30 <HAL_Delay>

	// H
	SetDigit(4);
 8001d22:	2004      	movs	r0, #4
 8001d24:	f7ff f81e 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4811      	ldr	r0, [pc, #68]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d2e:	f001 fd9a 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2120      	movs	r1, #32
 8001d36:	480f      	ldr	r0, [pc, #60]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d38:	f001 fd95 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d42:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <IndicationFlashError+0x110>)
 8001d44:	f001 fd8f 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2140      	movs	r1, #64	@ 0x40
 8001d4c:	4809      	ldr	r0, [pc, #36]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d4e:	f001 fd8a 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2108      	movs	r1, #8
 8001d56:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <IndicationFlashError+0x114>)
 8001d58:	f001 fd85 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f001 f867 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001d62:	f7fe fe37 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f001 f862 	bl	8002e30 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40010800 	.word	0x40010800

08001d78 <IndicationCalibration>:
//----------------------------< Режим калибровки >----------------------------

// Индикация при необходимости
// калибровки часов (вывод на дисплей "CALI")
void IndicationCalibration(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	// C
	SetDigit(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7fe fff1 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	2101      	movs	r1, #1
 8001d86:	483c      	ldr	r0, [pc, #240]	@ (8001e78 <IndicationCalibration+0x100>)
 8001d88:	f001 fd6d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4839      	ldr	r0, [pc, #228]	@ (8001e78 <IndicationCalibration+0x100>)
 8001d92:	f001 fd68 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d9c:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <IndicationCalibration+0x100>)
 8001d9e:	f001 fd62 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	2140      	movs	r1, #64	@ 0x40
 8001da6:	4835      	ldr	r0, [pc, #212]	@ (8001e7c <IndicationCalibration+0x104>)
 8001da8:	f001 fd5d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f001 f83f 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001db2:	f7fe fe0f 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f001 f83a 	bl	8002e30 <HAL_Delay>

	// A
	SetDigit(2);
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7fe ffd1 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	482c      	ldr	r0, [pc, #176]	@ (8001e78 <IndicationCalibration+0x100>)
 8001dc8:	f001 fd4d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2101      	movs	r1, #1
 8001dd0:	482a      	ldr	r0, [pc, #168]	@ (8001e7c <IndicationCalibration+0x104>)
 8001dd2:	f001 fd48 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2120      	movs	r1, #32
 8001dda:	4828      	ldr	r0, [pc, #160]	@ (8001e7c <IndicationCalibration+0x104>)
 8001ddc:	f001 fd43 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001de6:	4824      	ldr	r0, [pc, #144]	@ (8001e78 <IndicationCalibration+0x100>)
 8001de8:	f001 fd3d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	@ 0x40
 8001df0:	4822      	ldr	r0, [pc, #136]	@ (8001e7c <IndicationCalibration+0x104>)
 8001df2:	f001 fd38 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	2108      	movs	r1, #8
 8001dfa:	4820      	ldr	r0, [pc, #128]	@ (8001e7c <IndicationCalibration+0x104>)
 8001dfc:	f001 fd33 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f001 f815 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001e06:	f7fe fde5 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f001 f810 	bl	8002e30 <HAL_Delay>

	// L
	SetDigit(3);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f7fe ffa7 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4817      	ldr	r0, [pc, #92]	@ (8001e78 <IndicationCalibration+0x100>)
 8001e1c:	f001 fd23 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e26:	4814      	ldr	r0, [pc, #80]	@ (8001e78 <IndicationCalibration+0x100>)
 8001e28:	f001 fd1d 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2140      	movs	r1, #64	@ 0x40
 8001e30:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <IndicationCalibration+0x104>)
 8001e32:	f001 fd18 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f000 fffa 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001e3c:	f7fe fdca 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 fff5 	bl	8002e30 <HAL_Delay>

	// I
	SetDigit(4);
 8001e46:	2004      	movs	r0, #4
 8001e48:	f7fe ff8c 	bl	8000d64 <SetDigit>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e52:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <IndicationCalibration+0x100>)
 8001e54:	f001 fd07 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2140      	movs	r1, #64	@ 0x40
 8001e5c:	4807      	ldr	r0, [pc, #28]	@ (8001e7c <IndicationCalibration+0x104>)
 8001e5e:	f001 fd02 	bl	8003866 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 ffe4 	bl	8002e30 <HAL_Delay>
	ResetLeds();
 8001e68:	f7fe fdb4 	bl	80009d4 <ResetLeds>
	HAL_Delay(1);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 ffdf 	bl	8002e30 <HAL_Delay>
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40010800 	.word	0x40010800

08001e80 <BuildTimeCalibration>:

// Функция для сборки времени при калибровке
void BuildTimeCalibration(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
	// number[0-1] - Часы
	// number[2-3] - Минуты

	calibration.hours = number[0] * 10 + number[1];
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <BuildTimeCalibration+0x40>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <BuildTimeCalibration+0x40>)
 8001e94:	785b      	ldrb	r3, [r3, #1]
 8001e96:	4413      	add	r3, r2
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <BuildTimeCalibration+0x44>)
 8001e9c:	709a      	strb	r2, [r3, #2]
	calibration.minutes = number[2] * 10 + number[3];
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <BuildTimeCalibration+0x40>)
 8001ea0:	789b      	ldrb	r3, [r3, #2]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <BuildTimeCalibration+0x40>)
 8001eae:	78db      	ldrb	r3, [r3, #3]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <BuildTimeCalibration+0x44>)
 8001eb6:	70da      	strb	r2, [r3, #3]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000040 	.word	0x20000040
 8001ec4:	2000007c 	.word	0x2000007c

08001ec8 <IndicationCalibration_Time>:


// Индикация времени при калибровке
void IndicationCalibration_Time(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// Включение центральных светодиодов
	PrintPoint(2);
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7fe ffdb 	bl	8000e88 <PrintPoint>

	// Вывод цифр на дисплей
	switch (current_digit)
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	f200 808c 	bhi.w	8001ff8 <IndicationCalibration_Time+0x130>
 8001ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee8 <IndicationCalibration_Time+0x20>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001f17 	.word	0x08001f17
 8001ef0:	08001f4b 	.word	0x08001f4b
 8001ef4:	08001f95 	.word	0x08001f95
	{
		case 1:

			number[0] = current_number;
 8001ef8:	4b41      	ldr	r3, [pc, #260]	@ (8002000 <IndicationCalibration_Time+0x138>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f00:	701a      	strb	r2, [r3, #0]
			PrintFigure(current_digit, number[0]);
 8001f02:	4b3e      	ldr	r3, [pc, #248]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4a3e      	ldr	r2, [pc, #248]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f0a:	7812      	ldrb	r2, [r2, #0]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ff9e 	bl	8000e50 <PrintFigure>

		break;
 8001f14:	e070      	b.n	8001ff8 <IndicationCalibration_Time+0x130>

		case 2:

			number[1] = current_number;
 8001f16:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <IndicationCalibration_Time+0x138>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f1e:	705a      	strb	r2, [r3, #1]
			PrintFigure(current_digit-1, number[0]);
 8001f20:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4a36      	ldr	r2, [pc, #216]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f2c:	7812      	ldrb	r2, [r2, #0]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff8d 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[1]);
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4a31      	ldr	r2, [pc, #196]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f3e:	7852      	ldrb	r2, [r2, #1]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff84 	bl	8000e50 <PrintFigure>

		break;
 8001f48:	e056      	b.n	8001ff8 <IndicationCalibration_Time+0x130>

		case 3:

			number[2] = current_number;
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <IndicationCalibration_Time+0x138>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f52:	709a      	strb	r2, [r3, #2]
			PrintFigure(current_digit-2, number[0]);
 8001f54:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3b02      	subs	r3, #2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4a29      	ldr	r2, [pc, #164]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff73 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[1]);
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f76:	7852      	ldrb	r2, [r2, #1]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ff68 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[2]);
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4a1f      	ldr	r2, [pc, #124]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f88:	7892      	ldrb	r2, [r2, #2]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ff5f 	bl	8000e50 <PrintFigure>

		break;
 8001f92:	e031      	b.n	8001ff8 <IndicationCalibration_Time+0x130>

		case 4:

			number[3] = current_number;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <IndicationCalibration_Time+0x138>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001f9c:	70da      	strb	r2, [r3, #3]
			PrintFigure(current_digit-3, number[0]);
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ff4e 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-2, number[1]);
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3b02      	subs	r3, #2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001fc0:	7852      	ldrb	r2, [r2, #1]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ff43 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[2]);
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001fd6:	7892      	ldrb	r2, [r2, #2]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ff38 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[3]);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <IndicationCalibration_Time+0x134>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <IndicationCalibration_Time+0x13c>)
 8001fe8:	78d2      	ldrb	r2, [r2, #3]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ff2f 	bl	8000e50 <PrintFigure>

			// Формирование времени при калибровке
			BuildTimeCalibration();
 8001ff2:	f7ff ff45 	bl	8001e80 <BuildTimeCalibration>

		break;
 8001ff6:	bf00      	nop
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000003 	.word	0x20000003
 8002000:	20000183 	.word	0x20000183
 8002004:	20000040 	.word	0x20000040

08002008 <BuildDateCalibration>:


// Функция для сборки даты при калибровке
void BuildDateCalibration(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
	// number[0-1] - День месяца
	// number[2-3] - Месяц

	calibration.dayofmonth = number[0] * 10 + number[1];
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <BuildDateCalibration+0x40>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <BuildDateCalibration+0x40>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	4413      	add	r3, r2
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <BuildDateCalibration+0x44>)
 8002024:	701a      	strb	r2, [r3, #0]
	calibration.month = number[2] * 10 + number[3];
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <BuildDateCalibration+0x40>)
 8002028:	789b      	ldrb	r3, [r3, #2]
 800202a:	461a      	mov	r2, r3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <BuildDateCalibration+0x40>)
 8002036:	78db      	ldrb	r3, [r3, #3]
 8002038:	4413      	add	r3, r2
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <BuildDateCalibration+0x44>)
 800203e:	705a      	strb	r2, [r3, #1]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000040 	.word	0x20000040
 800204c:	2000007c 	.word	0x2000007c

08002050 <IndicationCalibration_Date>:


// Индикация даты при калибровке
void IndicationCalibration_Date(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	// Включение центрального светодиода
	PrintPoint(1);
 8002054:	2001      	movs	r0, #1
 8002056:	f7fe ff17 	bl	8000e88 <PrintPoint>

	// Вывод цифр на дисплей
	switch (current_digit)
 800205a:	4b4a      	ldr	r3, [pc, #296]	@ (8002184 <IndicationCalibration_Date+0x134>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	2b03      	cmp	r3, #3
 8002064:	f200 808c 	bhi.w	8002180 <IndicationCalibration_Date+0x130>
 8002068:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <IndicationCalibration_Date+0x20>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002081 	.word	0x08002081
 8002074:	0800209f 	.word	0x0800209f
 8002078:	080020d3 	.word	0x080020d3
 800207c:	0800211d 	.word	0x0800211d
	{
		case 1:

			number[0] = current_number;
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <IndicationCalibration_Date+0x138>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b41      	ldr	r3, [pc, #260]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002088:	701a      	strb	r2, [r3, #0]
			PrintFigure(current_digit, number[0]);
 800208a:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <IndicationCalibration_Date+0x134>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	4a3e      	ldr	r2, [pc, #248]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe feda 	bl	8000e50 <PrintFigure>

		break;
 800209c:	e070      	b.n	8002180 <IndicationCalibration_Date+0x130>

		case 2:

			number[1] = current_number;
 800209e:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <IndicationCalibration_Date+0x138>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b39      	ldr	r3, [pc, #228]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020a6:	705a      	strb	r2, [r3, #1]
			PrintFigure(current_digit-1, number[0]);
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <IndicationCalibration_Date+0x134>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4a36      	ldr	r2, [pc, #216]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fec9 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[1]);
 80020be:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <IndicationCalibration_Date+0x134>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4a31      	ldr	r2, [pc, #196]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020c6:	7852      	ldrb	r2, [r2, #1]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fec0 	bl	8000e50 <PrintFigure>

		break;
 80020d0:	e056      	b.n	8002180 <IndicationCalibration_Date+0x130>

		case 3:

			number[2] = current_number;
 80020d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <IndicationCalibration_Date+0x138>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020da:	709a      	strb	r2, [r3, #2]
			PrintFigure(current_digit-2, number[0]);
 80020dc:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <IndicationCalibration_Date+0x134>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3b02      	subs	r3, #2
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4a29      	ldr	r2, [pc, #164]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe feaf 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[1]);
 80020f2:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <IndicationCalibration_Date+0x134>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4a23      	ldr	r2, [pc, #140]	@ (800218c <IndicationCalibration_Date+0x13c>)
 80020fe:	7852      	ldrb	r2, [r2, #1]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fea4 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[2]);
 8002108:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <IndicationCalibration_Date+0x134>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002110:	7892      	ldrb	r2, [r2, #2]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fe9b 	bl	8000e50 <PrintFigure>

		break;
 800211a:	e031      	b.n	8002180 <IndicationCalibration_Date+0x130>

		case 4:

			number[3] = current_number;
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <IndicationCalibration_Date+0x138>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002124:	70da      	strb	r2, [r3, #3]
			PrintFigure(current_digit-3, number[0]);
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <IndicationCalibration_Date+0x134>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b03      	subs	r3, #3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4a16      	ldr	r2, [pc, #88]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe8a 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-2, number[1]);
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <IndicationCalibration_Date+0x134>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b02      	subs	r3, #2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4a11      	ldr	r2, [pc, #68]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fe7f 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit-1, number[2]);
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <IndicationCalibration_Date+0x134>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <IndicationCalibration_Date+0x13c>)
 800215e:	7892      	ldrb	r2, [r2, #2]
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fe74 	bl	8000e50 <PrintFigure>
			PrintFigure(current_digit, number[3]);
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <IndicationCalibration_Date+0x134>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4a07      	ldr	r2, [pc, #28]	@ (800218c <IndicationCalibration_Date+0x13c>)
 8002170:	78d2      	ldrb	r2, [r2, #3]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fe6b 	bl	8000e50 <PrintFigure>

			// Формирование даты при калибровке
			BuildDateCalibration();
 800217a:	f7ff ff45 	bl	8002008 <BuildDateCalibration>

		break;
 800217e:	bf00      	nop
	}
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000003 	.word	0x20000003
 8002188:	20000183 	.word	0x20000183
 800218c:	20000040 	.word	0x20000040

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f000 fdea 	bl	8002d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f90a 	bl	80023b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f000 fa80 	bl	80026a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021a0:	f000 f960 	bl	8002464 <MX_I2C1_Init>
  MX_TIM1_Init();
 80021a4:	f000 f98c 	bl	80024c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80021a8:	f000 fa2c 	bl	8002604 <MX_TIM2_Init>
  MX_CRC_Init();
 80021ac:	f000 f946 	bl	800243c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  // При включении на дисплее
  // пробегает змейка (слева направо)
  PrintSnakeMove_Direct();
 80021b0:	f7fe fe8a 	bl	8000ec8 <PrintSnakeMove_Direct>

  // Для поворотов энкодера
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80021b4:	2100      	movs	r1, #0
 80021b6:	486e      	ldr	r0, [pc, #440]	@ (8002370 <main+0x1e0>)
 80021b8:	f003 f8ca 	bl	8005350 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80021bc:	2104      	movs	r1, #4
 80021be:	486c      	ldr	r0, [pc, #432]	@ (8002370 <main+0x1e0>)
 80021c0:	f003 f8c6 	bl	8005350 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80021c4:	2108      	movs	r1, #8
 80021c6:	486a      	ldr	r0, [pc, #424]	@ (8002370 <main+0x1e0>)
 80021c8:	f003 f8c2 	bl	8005350 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 80021cc:	210c      	movs	r1, #12
 80021ce:	4868      	ldr	r0, [pc, #416]	@ (8002370 <main+0x1e0>)
 80021d0:	f003 f8be 	bl	8005350 <HAL_TIM_IC_Start_IT>

  // Моргание раз в секунду
  // в режиме настройки будильника
  HAL_TIM_Base_Start_IT(&htim2);
 80021d4:	4867      	ldr	r0, [pc, #412]	@ (8002374 <main+0x1e4>)
 80021d6:	f003 f811 	bl	80051fc <HAL_TIM_Base_Start_IT>

  // Чтение данных из flash
  ReadFlash();
 80021da:	f7ff fcf3 	bl	8001bc4 <ReadFlash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!f_StartWork)
 80021de:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <main+0x1e8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <main+0x60>
	  {
		  // При включении 2 секунды отображается "HI",
		  // после чего начинается работа устройства
		  PrintHi(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe feef 	bl	8000fcc <PrintHi>
 80021ee:	e7f6      	b.n	80021de <main+0x4e>
	  }

	  else
	  {
		  if (f_FlashError)
 80021f0:	4b62      	ldr	r3, [pc, #392]	@ (800237c <main+0x1ec>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <main+0x6e>
		  {
			  // Индикация ошибки при работе с Flash
			  IndicationFlashError();
 80021f8:	f7ff fd32 	bl	8001c60 <IndicationFlashError>
 80021fc:	e7ef      	b.n	80021de <main+0x4e>

		  else
		  {
			  // Обработка нажатий
			  // на сенсорную кнопку
			  ButtonPress();
 80021fe:	f7ff f9a1 	bl	8001544 <ButtonPress>

			  // Любой режим, кроме режима настройки
			  if (mode != 3)
 8002202:	4b5f      	ldr	r3, [pc, #380]	@ (8002380 <main+0x1f0>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b03      	cmp	r3, #3
 800220a:	d067      	beq.n	80022dc <main+0x14c>
			  {
				  // Чтение текущего времени
				  Get_Time();
 800220c:	f7ff f81a 	bl	8001244 <Get_Time>

				  // Увеличение скорости обновления температуры
				  force_temp_conv();
 8002210:	f7ff f88e 	bl	8001330 <force_temp_conv>

				  // Проверка необходимости
				  // обязательной калибровки
				  // (при замене батарейки
				  //  часы точно будут не откалиброваны)
				  if ((time.dayofmonth == 1) &&
 8002214:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <main+0x1f4>)
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10e      	bne.n	800223a <main+0xaa>
					  (time.month == 1) &&
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <main+0x1f4>)
 800221e:	795b      	ldrb	r3, [r3, #5]
				  if ((time.dayofmonth == 1) &&
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10a      	bne.n	800223a <main+0xaa>
					  (time.hour == 0) &&
 8002224:	4b57      	ldr	r3, [pc, #348]	@ (8002384 <main+0x1f4>)
 8002226:	789b      	ldrb	r3, [r3, #2]
					  (time.month == 1) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <main+0xaa>
					  (time.minutes == 0))
 800222c:	4b55      	ldr	r3, [pc, #340]	@ (8002384 <main+0x1f4>)
 800222e:	785b      	ldrb	r3, [r3, #1]
					  (time.hour == 0) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <main+0xaa>
				  {
					  // Установка флага часы не откалиброваны
					  // (нужен для блокировки других действий)
					  f_ClockNotCalibrated = 1;
 8002234:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <main+0x1f8>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
				  }

				  // Если требуется калибровка
				  if (f_ClockNotCalibrated)
 800223a:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <main+0x1f8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <main+0xc2>
				  {
					  // Индикация необходимости
					  // калибровки часов
					  if (mode != 4)
 8002242:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <main+0x1f0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b04      	cmp	r3, #4
 800224a:	d047      	beq.n	80022dc <main+0x14c>
						 IndicationCalibration();
 800224c:	f7ff fd94 	bl	8001d78 <IndicationCalibration>
 8002250:	e044      	b.n	80022dc <main+0x14c>
				  }

				  // Если калибровка не требуется
				  else
				  {
					  tim2_ResetAlarmMode = 0;
 8002252:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <main+0x1fc>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]

					  // Если будильник не установлен
					  if (!f_SetAlarm)
 8002258:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <main+0x200>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <main+0xe6>
					  {
						  // Выключение светодиода
						  GPIOA->BSRR |= 0x80000000;
 8002262:	4b4c      	ldr	r3, [pc, #304]	@ (8002394 <main+0x204>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	4a4b      	ldr	r2, [pc, #300]	@ (8002394 <main+0x204>)
 8002268:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800226c:	6113      	str	r3, [r2, #16]

						  f_Alarm = 0;
 800226e:	4b4a      	ldr	r3, [pc, #296]	@ (8002398 <main+0x208>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e01c      	b.n	80022b0 <main+0x120>

					  // Если будильник установлен
					  else
					  {
						  // Включение светодиода
						  GPIOA->BSRR |= 0x8000;
 8002276:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <main+0x204>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	4a46      	ldr	r2, [pc, #280]	@ (8002394 <main+0x204>)
 800227c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002280:	6113      	str	r3, [r2, #16]

						  // Проверка будильника
						  if ((time.hour == alarm.hours) &&
 8002282:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <main+0x1f4>)
 8002284:	789a      	ldrb	r2, [r3, #2]
 8002286:	4b45      	ldr	r3, [pc, #276]	@ (800239c <main+0x20c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d10c      	bne.n	80022a8 <main+0x118>
							  (time.minutes == alarm.minutes) &&
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <main+0x1f4>)
 8002290:	785a      	ldrb	r2, [r3, #1]
 8002292:	4b42      	ldr	r3, [pc, #264]	@ (800239c <main+0x20c>)
 8002294:	785b      	ldrb	r3, [r3, #1]
						  if ((time.hour == alarm.hours) &&
 8002296:	429a      	cmp	r2, r3
 8002298:	d106      	bne.n	80022a8 <main+0x118>
							  (time.seconds == 0))
 800229a:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <main+0x1f4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
							  (time.minutes == alarm.minutes) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <main+0x118>
						  {
							  // Установка флага включения пьезопищалки
							  f_Alarm = 1;
 80022a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002398 <main+0x208>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
						  }

						  // Ручное отключение будильника
						  EncoderButtonPress();
 80022a8:	f7ff fae4 	bl	8001874 <EncoderButtonPress>

						  // Управление пьезопищалкой
						  AlarmControl();
 80022ac:	f7ff f92e 	bl	800150c <AlarmControl>
					  }

					  // Если была установка/
					  // сброс будильника
					  if (f_SaveAlarm)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <main+0x210>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <main+0x14c>
					  {
						  // Если будильник установлен,
						  // то нужно сохранить данные
						  if (f_SetAlarm)
 80022ba:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <main+0x200>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <main+0x13c>
							  write_alarm[2] = 1;
 80022c4:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <main+0x214>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	e002      	b.n	80022d2 <main+0x142>
						  else
							  write_alarm[2] = 0;
 80022cc:	4b35      	ldr	r3, [pc, #212]	@ (80023a4 <main+0x214>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]

						  // Запись данных на flash
						  WriteFlash();
 80022d2:	f7ff fc21 	bl	8001b18 <WriteFlash>

						  f_SaveAlarm = 0;
 80022d6:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <main+0x210>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
					  }
				  }
			  }

			  // Если часы откалиброваны
			  if (!f_ClockNotCalibrated)
 80022dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <main+0x1f8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12c      	bne.n	800233e <main+0x1ae>
			  {
				  switch (mode)
 80022e4:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <main+0x1f0>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d01f      	beq.n	800232e <main+0x19e>
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	dc25      	bgt.n	800233e <main+0x1ae>
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d002      	beq.n	80022fc <main+0x16c>
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d003      	beq.n	8002302 <main+0x172>
 80022fa:	e020      	b.n	800233e <main+0x1ae>
				  {
				  	 // Нормальный режим
					 case 1:

						 // Отображение текущего времени
						 DisplayTime();
 80022fc:	f7ff f882 	bl	8001404 <DisplayTime>

					 break;
 8002300:	e01d      	b.n	800233e <main+0x1ae>

					 // Расширенный нормальный режим
					 case 2:

						switch (data)
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <main+0x218>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d00c      	beq.n	8002326 <main+0x196>
 800230c:	2b03      	cmp	r3, #3
 800230e:	dc15      	bgt.n	800233c <main+0x1ac>
 8002310:	2b01      	cmp	r3, #1
 8002312:	d002      	beq.n	800231a <main+0x18a>
 8002314:	2b02      	cmp	r3, #2
 8002316:	d003      	beq.n	8002320 <main+0x190>
							case 3:
									DisplayDegrees();
							break;
						}

					 break;
 8002318:	e010      	b.n	800233c <main+0x1ac>
									DisplayDate();
 800231a:	f7ff f8b5 	bl	8001488 <DisplayDate>
							break;
 800231e:	e005      	b.n	800232c <main+0x19c>
									DisplayTime();
 8002320:	f7ff f870 	bl	8001404 <DisplayTime>
							break;
 8002324:	e002      	b.n	800232c <main+0x19c>
									DisplayDegrees();
 8002326:	f7ff f83d 	bl	80013a4 <DisplayDegrees>
							break;
 800232a:	bf00      	nop
					 break;
 800232c:	e006      	b.n	800233c <main+0x1ac>
					 // Режим настройки
					 // (установка будильника)
					 case 3:

						// Изменение текущей цифры
						TurnEncoder();
 800232e:	f7ff fa6d 	bl	800180c <TurnEncoder>

						// Смена разрядов на дисплее
						EncoderButtonPress();
 8002332:	f7ff fa9f 	bl	8001874 <EncoderButtonPress>

						// Индикация времени будильника
						IndicationAlarmClock();
 8002336:	f7ff fb13 	bl	8001960 <IndicationAlarmClock>

					 break;
 800233a:	e000      	b.n	800233e <main+0x1ae>
					 break;
 800233c:	bf00      	nop
			  }

			  // Режим калибровки
			  // (установка текущей
			  // даты и времени)
			  if (mode == 4)
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <main+0x1f0>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b04      	cmp	r3, #4
 8002346:	f47f af4a 	bne.w	80021de <main+0x4e>
			  {
				  // Изменение текущей цифры
				  TurnEncoder();
 800234a:	f7ff fa5f 	bl	800180c <TurnEncoder>

				 // Смена разрядов на дисплее
				 EncoderButtonPress();
 800234e:	f7ff fa91 	bl	8001874 <EncoderButtonPress>

				 if (stage_calibration == 1)
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <main+0x21c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <main+0x1d0>
				 {
					 // Индикация даты при калибровке
					 IndicationCalibration_Date();
 800235a:	f7ff fe79 	bl	8002050 <IndicationCalibration_Date>
 800235e:	e73e      	b.n	80021de <main+0x4e>
				 }

				 else
				 if (stage_calibration == 2)
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <main+0x21c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f47f af3a 	bne.w	80021de <main+0x4e>
				 {
					 // Индикация времени при калибровке
					 IndicationCalibration_Time();
 800236a:	f7ff fdad 	bl	8001ec8 <IndicationCalibration_Time>
	  if (!f_StartWork)
 800236e:	e736      	b.n	80021de <main+0x4e>
 8002370:	200000dc 	.word	0x200000dc
 8002374:	20000124 	.word	0x20000124
 8002378:	2000018f 	.word	0x2000018f
 800237c:	20000068 	.word	0x20000068
 8002380:	20000002 	.word	0x20000002
 8002384:	2000006c 	.word	0x2000006c
 8002388:	20000078 	.word	0x20000078
 800238c:	20000188 	.word	0x20000188
 8002390:	20000184 	.word	0x20000184
 8002394:	40010800 	.word	0x40010800
 8002398:	2000018e 	.word	0x2000018e
 800239c:	20000044 	.word	0x20000044
 80023a0:	20000190 	.word	0x20000190
 80023a4:	20000048 	.word	0x20000048
 80023a8:	20000004 	.word	0x20000004
 80023ac:	20000001 	.word	0x20000001

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b090      	sub	sp, #64	@ 0x40
 80023b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 0318 	add.w	r3, r7, #24
 80023ba:	2228      	movs	r2, #40	@ 0x28
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fde6 	bl	8005f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e0:	2301      	movs	r3, #1
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e4:	2302      	movs	r3, #2
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fab3 	bl	8004964 <HAL_RCC_OscConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002404:	f000 f9d6 	bl	80027b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002408:	230f      	movs	r3, #15
 800240a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240c:	2302      	movs	r3, #2
 800240e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fd20 	bl	8004e68 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800242e:	f000 f9c1 	bl	80027b4 <Error_Handler>
  }
}
 8002432:	bf00      	nop
 8002434:	3740      	adds	r7, #64	@ 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_CRC_Init+0x20>)
 8002442:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <MX_CRC_Init+0x24>)
 8002444:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_CRC_Init+0x20>)
 8002448:	f000 fe23 	bl	8003092 <HAL_CRC_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002452:	f000 f9af 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000080 	.word	0x20000080
 8002460:	40023000 	.word	0x40023000

08002464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <MX_I2C1_Init+0x54>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <MX_I2C1_Init+0x58>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002482:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_I2C1_Init+0x50>)
 80024a2:	f001 f9f9 	bl	8003898 <HAL_I2C_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024ac:	f000 f982 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000088 	.word	0x20000088
 80024b8:	40005400 	.word	0x40005400
 80024bc:	000186a0 	.word	0x000186a0

080024c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024de:	463b      	mov	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ea:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80024ec:	4a44      	ldr	r2, [pc, #272]	@ (8002600 <MX_TIM1_Init+0x140>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80024f0:	4b42      	ldr	r3, [pc, #264]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80024f2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80024f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b40      	ldr	r3, [pc, #256]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024fe:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002504:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002506:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <MX_TIM1_Init+0x13c>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002518:	4838      	ldr	r0, [pc, #224]	@ (80025fc <MX_TIM1_Init+0x13c>)
 800251a:	f002 fe1f 	bl	800515c <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002524:	f000 f946 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0318 	add.w	r3, r7, #24
 8002532:	4619      	mov	r1, r3
 8002534:	4831      	ldr	r0, [pc, #196]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002536:	f003 f9a3 	bl	8005880 <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002540:	f000 f938 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002544:	482d      	ldr	r0, [pc, #180]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002546:	f002 feab 	bl	80052a0 <HAL_TIM_IC_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002550:	f000 f930 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4619      	mov	r1, r3
 8002562:	4826      	ldr	r0, [pc, #152]	@ (80025fc <MX_TIM1_Init+0x13c>)
 8002564:	f003 fca4 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800256e:	f000 f921 	bl	80027b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002572:	2302      	movs	r3, #2
 8002574:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002576:	2301      	movs	r3, #1
 8002578:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002582:	463b      	mov	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	481c      	ldr	r0, [pc, #112]	@ (80025fc <MX_TIM1_Init+0x13c>)
 800258a:	f003 f8dd 	bl	8005748 <HAL_TIM_IC_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002594:	f000 f90e 	bl	80027b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002598:	2300      	movs	r3, #0
 800259a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800259c:	2302      	movs	r3, #2
 800259e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025a0:	463b      	mov	r3, r7
 80025a2:	2204      	movs	r2, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4815      	ldr	r0, [pc, #84]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80025a8:	f003 f8ce 	bl	8005748 <HAL_TIM_IC_ConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80025b2:	f000 f8ff 	bl	80027b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80025b6:	2302      	movs	r3, #2
 80025b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025ba:	2301      	movs	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80025be:	463b      	mov	r3, r7
 80025c0:	2208      	movs	r2, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	480d      	ldr	r0, [pc, #52]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80025c6:	f003 f8bf 	bl	8005748 <HAL_TIM_IC_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80025d0:	f000 f8f0 	bl	80027b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80025d8:	2302      	movs	r3, #2
 80025da:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	220c      	movs	r2, #12
 80025e0:	4619      	mov	r1, r3
 80025e2:	4806      	ldr	r0, [pc, #24]	@ (80025fc <MX_TIM1_Init+0x13c>)
 80025e4:	f003 f8b0 	bl	8005748 <HAL_TIM_IC_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80025ee:	f000 f8e1 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	@ 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200000dc 	.word	0x200000dc
 8002600:	40012c00 	.word	0x40012c00

08002604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002618:	463b      	mov	r3, r7
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002620:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <MX_TIM2_Init+0x98>)
 8002622:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002628:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <MX_TIM2_Init+0x98>)
 800262a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800262e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <MX_TIM2_Init+0x98>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002636:	4b19      	ldr	r3, [pc, #100]	@ (800269c <MX_TIM2_Init+0x98>)
 8002638:	f242 7210 	movw	r2, #10000	@ 0x2710
 800263c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_TIM2_Init+0x98>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002644:	4b15      	ldr	r3, [pc, #84]	@ (800269c <MX_TIM2_Init+0x98>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800264a:	4814      	ldr	r0, [pc, #80]	@ (800269c <MX_TIM2_Init+0x98>)
 800264c:	f002 fd86 	bl	800515c <HAL_TIM_Base_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002656:	f000 f8ad 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	4619      	mov	r1, r3
 8002666:	480d      	ldr	r0, [pc, #52]	@ (800269c <MX_TIM2_Init+0x98>)
 8002668:	f003 f90a 	bl	8005880 <HAL_TIM_ConfigClockSource>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002672:	f000 f89f 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800267e:	463b      	mov	r3, r7
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	@ (800269c <MX_TIM2_Init+0x98>)
 8002684:	f003 fc14 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800268e:	f000 f891 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000124 	.word	0x20000124

080026a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a3a      	ldr	r2, [pc, #232]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026cc:	4b35      	ldr	r3, [pc, #212]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <MX_GPIO_Init+0x104>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a28      	ldr	r2, [pc, #160]	@ (80027a4 <MX_GPIO_Init+0x104>)
 8002702:	f043 0308 	orr.w	r3, r3, #8
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <MX_GPIO_Init+0x104>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_Pin|Dig4_Pin|Dig3_Pin|G_Pin
 8002714:	2200      	movs	r2, #0
 8002716:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 800271a:	4823      	ldr	r0, [pc, #140]	@ (80027a8 <MX_GPIO_Init+0x108>)
 800271c:	f001 f8a3 	bl	8003866 <HAL_GPIO_WritePin>
                          |Dig2_Pin|C_Pin|F_Pin|DP_Pin
                          |LED_Red_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|D_Pin|Dig1_Pin|E_Pin
 8002720:	2200      	movs	r2, #0
 8002722:	f644 4103 	movw	r1, #19459	@ 0x4c03
 8002726:	4821      	ldr	r0, [pc, #132]	@ (80027ac <MX_GPIO_Init+0x10c>)
 8002728:	f001 f89d 	bl	8003866 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800272c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4619      	mov	r1, r3
 8002740:	481b      	ldr	r0, [pc, #108]	@ (80027b0 <MX_GPIO_Init+0x110>)
 8002742:	f000 fef5 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin Dig4_Pin Dig3_Pin G_Pin
                           Dig2_Pin C_Pin F_Pin DP_Pin
                           LED_Red_Pin */
  GPIO_InitStruct.Pin = B_Pin|Dig4_Pin|Dig3_Pin|G_Pin
 8002746:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 800274a:	613b      	str	r3, [r7, #16]
                          |Dig2_Pin|C_Pin|F_Pin|DP_Pin
                          |LED_Red_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2302      	movs	r3, #2
 8002756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4619      	mov	r1, r3
 800275e:	4812      	ldr	r0, [pc, #72]	@ (80027a8 <MX_GPIO_Init+0x108>)
 8002760:	f000 fee6 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin D_Pin Dig1_Pin E_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = A_Pin|D_Pin|Dig1_Pin|E_Pin
 8002764:	f644 4303 	movw	r3, #19459	@ 0x4c03
 8002768:	613b      	str	r3, [r7, #16]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	2301      	movs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2302      	movs	r3, #2
 8002774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4619      	mov	r1, r3
 800277c:	480b      	ldr	r0, [pc, #44]	@ (80027ac <MX_GPIO_Init+0x10c>)
 800277e:	f000 fed7 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enc_Button_Pin */
  GPIO_InitStruct.Pin = Enc_Button_Pin;
 8002782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enc_Button_GPIO_Port, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_GPIO_Init+0x108>)
 8002798:	f000 feca 	bl	8003530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800
 80027ac:	40010c00 	.word	0x40010c00
 80027b0:	40011000 	.word	0x40011000

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <Error_Handler+0x8>

080027c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_MspInit+0x5c>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_MspInit+0x5c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_MspInit+0x5c>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_MspInit+0x5c>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <HAL_MspInit+0x5c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <HAL_MspInit+0x5c>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_MspInit+0x60>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_MspInit+0x60>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000

08002824 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a09      	ldr	r2, [pc, #36]	@ (8002858 <HAL_CRC_MspInit+0x34>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10b      	bne.n	800284e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_CRC_MspInit+0x38>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <HAL_CRC_MspInit+0x38>)
 800283c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002840:	6153      	str	r3, [r2, #20]
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_CRC_MspInit+0x38>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40023000 	.word	0x40023000
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_I2C_MspInit+0x90>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d132      	bne.n	80028e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002898:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289e:	2312      	movs	r3, #18
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4812      	ldr	r0, [pc, #72]	@ (80028f8 <HAL_I2C_MspInit+0x98>)
 80028ae:	f000 fe3f 	bl	8003530 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80028b2:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <HAL_I2C_MspInit+0x9c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c8:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <HAL_I2C_MspInit+0x9c>)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 80028d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028d8:	61d3      	str	r3, [r2, #28]
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_I2C_MspInit+0x94>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	@ 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40005400 	.word	0x40005400
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40010000 	.word	0x40010000

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0318 	add.w	r3, r7, #24
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <HAL_TIM_Base_MspInit+0xe8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d145      	bne.n	80029ac <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 8002926:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a2b      	ldr	r2, [pc, #172]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002950:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0318 	add.w	r3, r7, #24
 8002962:	4619      	mov	r1, r3
 8002964:	4822      	ldr	r0, [pc, #136]	@ (80029f0 <HAL_TIM_Base_MspInit+0xf0>)
 8002966:	f000 fde3 	bl	8003530 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2018      	movs	r0, #24
 8002970:	f000 fb59 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002974:	2018      	movs	r0, #24
 8002976:	f000 fb72 	bl	800305e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2019      	movs	r0, #25
 8002980:	f000 fb51 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002984:	2019      	movs	r0, #25
 8002986:	f000 fb6a 	bl	800305e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	201a      	movs	r0, #26
 8002990:	f000 fb49 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002994:	201a      	movs	r0, #26
 8002996:	f000 fb62 	bl	800305e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	201b      	movs	r0, #27
 80029a0:	f000 fb41 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029a4:	201b      	movs	r0, #27
 80029a6:	f000 fb5a 	bl	800305e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029aa:	e018      	b.n	80029de <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b4:	d113      	bne.n	80029de <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_TIM_Base_MspInit+0xec>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	201c      	movs	r0, #28
 80029d4:	f000 fb27 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d8:	201c      	movs	r0, #28
 80029da:	f000 fb40 	bl	800305e <HAL_NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	@ 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010800 	.word	0x40010800

080029f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <NMI_Handler+0x4>

080029fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <BusFault_Handler+0x4>

08002a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <UsageFault_Handler+0x4>

08002a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f000 f9d8 	bl	8002df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <TIM1_BRK_IRQHandler+0x10>)
 8002a52:	f002 fd89 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200000dc 	.word	0x200000dc

08002a60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a64:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <TIM1_UP_IRQHandler+0x10>)
 8002a66:	f002 fd7f 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200000dc 	.word	0x200000dc

08002a74 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002a7a:	f002 fd75 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200000dc 	.word	0x200000dc

08002a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <TIM1_CC_IRQHandler+0x10>)
 8002a8e:	f002 fd6b 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200000dc 	.word	0x200000dc

08002a9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <TIM2_IRQHandler+0x10>)
 8002aa2:	f002 fd61 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000124 	.word	0x20000124

08002ab0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	// Таймер вращения энкодера
	if(htim->Instance == TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	@ (8002b54 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d143      	bne.n	8002b4a <HAL_TIM_IC_CaptureCallback+0x9a>
	{
		// Падение
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7f1b      	ldrb	r3, [r3, #28]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_TIM_IC_CaptureCallback+0x26>
	    {
	    	t_LastFALLING_ENCChannel = 1;
 8002aca:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
			t_ENCS1State = 0;
 8002ad0:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <HAL_TIM_IC_CaptureCallback+0xac>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
	    }

		// Подъём
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7f1b      	ldrb	r3, [r3, #28]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d113      	bne.n	8002b06 <HAL_TIM_IC_CaptureCallback+0x56>
	    {
	    	t_ENCS1State = 1;
 8002ade:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_TIM_IC_CaptureCallback+0xac>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]

	    	if ((t_LastFALLING_ENCChannel == 2) && (t_ENCS2State == 0))
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d10b      	bne.n	8002b06 <HAL_TIM_IC_CaptureCallback+0x56>
 8002aee:	4b1c      	ldr	r3, [pc, #112]	@ (8002b60 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <HAL_TIM_IC_CaptureCallback+0x56>
	    	{
	    		t_ENCS1COUNTs++;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002b04:	801a      	strh	r2, [r3, #0]
	    	}
	    }

	    // Падение
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d105      	bne.n	8002b1a <HAL_TIM_IC_CaptureCallback+0x6a>
	    {
	    	t_LastFALLING_ENCChannel = 2;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
	    	t_ENCS2State = 0;
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
	    }

	    // Подъём
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7f1b      	ldrb	r3, [r3, #28]
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d113      	bne.n	8002b4a <HAL_TIM_IC_CaptureCallback+0x9a>
	    {
	    	t_ENCS2State = 1;
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]

	    	if ((t_LastFALLING_ENCChannel == 1) && (t_ENCS1State == 0))
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10b      	bne.n	8002b4a <HAL_TIM_IC_CaptureCallback+0x9a>
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_TIM_IC_CaptureCallback+0xac>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_TIM_IC_CaptureCallback+0x9a>
	    	{
	    		t_ENCS2COUNTs++;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002b48:	801a      	strh	r2, [r3, #0]
	    	}
	    }
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	20000182 	.word	0x20000182
 8002b5c:	20000180 	.word	0x20000180
 8002b60:	20000181 	.word	0x20000181
 8002b64:	2000017c 	.word	0x2000017c
 8002b68:	2000017e 	.word	0x2000017e

08002b6c <HAL_TIM_PeriodElapsedCallback>:


// Прерывание по переполнению таймера 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	f040 80aa 	bne.w	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x168>
	{
		// Если устройство
		// ещё не начало работу
		if (!f_StartWork)
 8002b80:	4b57      	ldr	r3, [pc, #348]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d111      	bne.n	8002bae <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			tim2_Hi++;
 8002b8a:	4b56      	ldr	r3, [pc, #344]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b53      	ldr	r3, [pc, #332]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b96:	701a      	strb	r2, [r3, #0]

			// При включении 2 секунды отображается "HI",
			// после чего начинается работа устройства
			if (tim2_Hi == 3)
 8002b98:	4b52      	ldr	r3, [pc, #328]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d105      	bne.n	8002bae <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				// Сброс отсчётов
				tim2_Hi = 0;
 8002ba2:	4b50      	ldr	r3, [pc, #320]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

				// Флаг начала работы
				// (этот флаг не должен сбрасываться)
				f_StartWork = 1;
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
		}


		// Если будильник включён,
		// то начинается отсчёт
		if (f_Alarm)
 8002bae:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			tim2_AlarmCounter++;
 8002bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bc4:	801a      	strh	r2, [r3, #0]

			// Автоматическое отключение
			// будильника спустя 5 минут (60*5 с)
			if (tim2_AlarmCounter == 300)
 8002bc6:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002bd0:	d109      	bne.n	8002be6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				f_Alarm = 0;
 8002bd2:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
				tim2_AlarmCounter = 0;
 8002bd8:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	e002      	b.n	8002be6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			}
		}

		else
			tim2_AlarmCounter = 0;
 8002be0:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]


		switch (mode)
 8002be6:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d051      	beq.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x128>
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	dc68      	bgt.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d002      	beq.n	8002bfe <HAL_TIM_PeriodElapsedCallback+0x92>
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d01f      	beq.n	8002c3c <HAL_TIM_PeriodElapsedCallback+0xd0>
				}

			break;

			default:
			break;
 8002bfc:	e063      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x15a>
				tim2_ChangeData++;
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c0a:	701a      	strb	r2, [r3, #0]
				if (tim2_ChangeData == 10)
 8002c0c:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b0a      	cmp	r3, #10
 8002c14:	d159      	bne.n	8002cca <HAL_TIM_PeriodElapsedCallback+0x15e>
					data++;
 8002c16:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b35      	ldr	r3, [pc, #212]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c22:	701a      	strb	r2, [r3, #0]
					if (data == 4)
 8002c24:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d102      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0xc8>
						data = 1;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
					tim2_ChangeData = 0;
 8002c34:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
			break;
 8002c3a:	e046      	b.n	8002cca <HAL_TIM_PeriodElapsedCallback+0x15e>
				if (GPIOA->ODR & 0x8000)
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_TIM_PeriodElapsedCallback+0xea>
					GPIOA->BSRR |= 0x80000000;
 8002c48:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c52:	6113      	str	r3, [r2, #16]
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_PeriodElapsedCallback+0xf6>
					GPIOA->BSRR |= 0x8000;
 8002c56:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	4a28      	ldr	r2, [pc, #160]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c60:	6113      	str	r3, [r2, #16]
				tim2_ResetAlarmMode++;
 8002c62:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c6e:	701a      	strb	r2, [r3, #0]
				if (tim2_ResetAlarmMode == 120)
 8002c70:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b78      	cmp	r3, #120	@ 0x78
 8002c78:	d129      	bne.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x162>
					mode = 1;
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
					counts = 0;
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
					tim2_ResetAlarmMode = 0;
 8002c86:	4b1e      	ldr	r3, [pc, #120]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
					f_SetAlarm = 0;
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			break;
 8002c92:	e01c      	b.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x162>
				tim2_ResetCalibrationMode++;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ca0:	801a      	strh	r2, [r3, #0]
				if (tim2_ResetCalibrationMode == 240)
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2bf0      	cmp	r3, #240	@ 0xf0
 8002caa:	d112      	bne.n	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x166>
					mode = 1;
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
					counts = 0;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
					counts_long = 0;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
					tim2_ResetCalibrationMode = 0;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
			break;
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x166>
			break;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x168>
			break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x168>
			break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x168>
			break;
 8002cd2:	bf00      	nop
		}
	}
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	2000018f 	.word	0x2000018f
 8002ce4:	20000189 	.word	0x20000189
 8002ce8:	2000018e 	.word	0x2000018e
 8002cec:	2000018a 	.word	0x2000018a
 8002cf0:	20000002 	.word	0x20000002
 8002cf4:	20000187 	.word	0x20000187
 8002cf8:	20000004 	.word	0x20000004
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	20000188 	.word	0x20000188
 8002d04:	20000185 	.word	0x20000185
 8002d08:	20000184 	.word	0x20000184
 8002d0c:	2000018c 	.word	0x2000018c
 8002d10:	20000186 	.word	0x20000186

08002d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d20:	f7ff fff8 	bl	8002d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d24:	480b      	ldr	r0, [pc, #44]	@ (8002d54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d26:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d28:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3a:	4a09      	ldr	r2, [pc, #36]	@ (8002d60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d3c:	4c09      	ldr	r4, [pc, #36]	@ (8002d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f003 f929 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d4e:	f7ff fa1f 	bl	8002190 <main>
  bx lr
 8002d52:	4770      	bx	lr
  ldr r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002d5c:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 8002d60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002d64:	200001b8 	.word	0x200001b8

08002d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_2_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_Init+0x28>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a07      	ldr	r2, [pc, #28]	@ (8002d94 <HAL_Init+0x28>)
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	f000 f947 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d82:	200f      	movs	r0, #15
 8002d84:	f000 f808 	bl	8002d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d88:	f7ff fd1a 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_InitTick+0x54>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <HAL_InitTick+0x58>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f95f 	bl	800307a <HAL_SYSTICK_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00e      	b.n	8002de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d80a      	bhi.n	8002de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f000 f927 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <HAL_InitTick+0x5c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000008 	.word	0x20000008
 8002df0:	20000010 	.word	0x20000010
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_IncTick+0x1c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_IncTick+0x20>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	4a03      	ldr	r2, [pc, #12]	@ (8002e18 <HAL_IncTick+0x20>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000010 	.word	0x20000010
 8002e18:	20000194 	.word	0x20000194

08002e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b02      	ldr	r3, [pc, #8]	@ (8002e2c <HAL_GetTick+0x10>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	20000194 	.word	0x20000194

08002e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_Delay+0x44>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffe0 	bl	8002e1c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000010 	.word	0x20000010

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4906      	ldr	r1, [pc, #24]	@ (8002f10 <__NVIC_EnableIRQ+0x34>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	@ (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	@ (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff90 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	@ (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff2d 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff42 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff90 	bl	8002f68 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5f 	bl	8002f14 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff35 	bl	8002edc <__NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffa2 	bl	8002fcc <SysTick_Config>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e00e      	b.n	80030c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	795b      	ldrb	r3, [r3, #5]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fbb5 	bl	8002824 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3f0      	bcc.n	80030f6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003122:	693b      	ldr	r3, [r7, #16]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
	...

08003130 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800314a:	4b2f      	ldr	r3, [pc, #188]	@ (8003208 <HAL_FLASH_Program+0xd8>)
 800314c:	7e1b      	ldrb	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_FLASH_Program+0x26>
 8003152:	2302      	movs	r3, #2
 8003154:	e054      	b.n	8003200 <HAL_FLASH_Program+0xd0>
 8003156:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <HAL_FLASH_Program+0xd8>)
 8003158:	2201      	movs	r2, #1
 800315a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800315c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003160:	f000 f8a8 	bl	80032b4 <FLASH_WaitForLastOperation>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d144      	bne.n	80031f8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003174:	2301      	movs	r3, #1
 8003176:	757b      	strb	r3, [r7, #21]
 8003178:	e007      	b.n	800318a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d102      	bne.n	8003186 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003180:	2302      	movs	r3, #2
 8003182:	757b      	strb	r3, [r7, #21]
 8003184:	e001      	b.n	800318a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003186:	2304      	movs	r3, #4
 8003188:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800318a:	2300      	movs	r3, #0
 800318c:	75bb      	strb	r3, [r7, #22]
 800318e:	e02d      	b.n	80031ec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003190:	7dbb      	ldrb	r3, [r7, #22]
 8003192:	005a      	lsls	r2, r3, #1
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	eb02 0c03 	add.w	ip, r2, r3
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	0119      	lsls	r1, r3, #4
 800319e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a2:	f1c1 0620 	rsb	r6, r1, #32
 80031a6:	f1a1 0020 	sub.w	r0, r1, #32
 80031aa:	fa22 f401 	lsr.w	r4, r2, r1
 80031ae:	fa03 f606 	lsl.w	r6, r3, r6
 80031b2:	4334      	orrs	r4, r6
 80031b4:	fa23 f000 	lsr.w	r0, r3, r0
 80031b8:	4304      	orrs	r4, r0
 80031ba:	fa23 f501 	lsr.w	r5, r3, r1
 80031be:	b2a3      	uxth	r3, r4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4660      	mov	r0, ip
 80031c4:	f000 f85a 	bl	800327c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031cc:	f000 f872 	bl	80032b4 <FLASH_WaitForLastOperation>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80031d4:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <HAL_FLASH_Program+0xdc>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <HAL_FLASH_Program+0xdc>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80031e6:	7dbb      	ldrb	r3, [r7, #22]
 80031e8:	3301      	adds	r3, #1
 80031ea:	75bb      	strb	r3, [r7, #22]
 80031ec:	7dba      	ldrb	r2, [r7, #22]
 80031ee:	7d7b      	ldrb	r3, [r7, #21]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3cd      	bcc.n	8003190 <HAL_FLASH_Program+0x60>
 80031f4:	e000      	b.n	80031f8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80031f6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <HAL_FLASH_Program+0xd8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	761a      	strb	r2, [r3, #24]

  return status;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003208:	20000198 	.word	0x20000198
 800320c:	40022000 	.word	0x40022000

08003210 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <HAL_FLASH_Unlock+0x40>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003226:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <HAL_FLASH_Unlock+0x40>)
 8003228:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <HAL_FLASH_Unlock+0x44>)
 800322a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <HAL_FLASH_Unlock+0x40>)
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_FLASH_Unlock+0x48>)
 8003230:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <HAL_FLASH_Unlock+0x40>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003242:	79fb      	ldrb	r3, [r7, #7]
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40022000 	.word	0x40022000
 8003254:	45670123 	.word	0x45670123
 8003258:	cdef89ab 	.word	0xcdef89ab

0800325c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_FLASH_Lock+0x1c>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <HAL_FLASH_Lock+0x1c>)
 8003266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800326a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000

0800327c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003288:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <FLASH_Program_HalfWord+0x30>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <FLASH_Program_HalfWord+0x34>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <FLASH_Program_HalfWord+0x34>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	801a      	strh	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000198 	.word	0x20000198
 80032b0:	40022000 	.word	0x40022000

080032b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff fdae 	bl	8002e1c <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80032c2:	e010      	b.n	80032e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d00c      	beq.n	80032e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <FLASH_WaitForLastOperation+0x2e>
 80032d2:	f7ff fda3 	bl	8002e1c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d201      	bcs.n	80032e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e025      	b.n	8003332 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80032e6:	4b15      	ldr	r3, [pc, #84]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e8      	bne.n	80032c4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80032fe:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 8003300:	2220      	movs	r2, #32
 8003302:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003304:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003310:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800331c:	4b07      	ldr	r3, [pc, #28]	@ (800333c <FLASH_WaitForLastOperation+0x88>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003328:	f000 f80a 	bl	8003340 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40022000 	.word	0x40022000

08003340 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800334a:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003356:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f043 0302 	orr.w	r3, r3, #2
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 8003360:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 8003380:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800338a:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003396:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	4a0f      	ldr	r2, [pc, #60]	@ (80033dc <FLASH_SetErrorCode+0x9c>)
 80033a0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f240 1201 	movw	r2, #257	@ 0x101
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d106      	bne.n	80033c6 <FLASH_SetErrorCode+0x86>
 80033b8:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	61d3      	str	r3, [r2, #28]
}  
 80033c4:	e002      	b.n	80033cc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80033c6:	4a04      	ldr	r2, [pc, #16]	@ (80033d8 <FLASH_SetErrorCode+0x98>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60d3      	str	r3, [r2, #12]
}  
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	20000198 	.word	0x20000198

080033e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033f2:	4b2f      	ldr	r3, [pc, #188]	@ (80034b0 <HAL_FLASHEx_Erase+0xd0>)
 80033f4:	7e1b      	ldrb	r3, [r3, #24]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_FLASHEx_Erase+0x1e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e053      	b.n	80034a6 <HAL_FLASHEx_Erase+0xc6>
 80033fe:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <HAL_FLASHEx_Erase+0xd0>)
 8003400:	2201      	movs	r2, #1
 8003402:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d116      	bne.n	800343a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800340c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003410:	f7ff ff50 	bl	80032b4 <FLASH_WaitForLastOperation>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d141      	bne.n	800349e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800341a:	2001      	movs	r0, #1
 800341c:	f000 f84c 	bl	80034b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003420:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003424:	f7ff ff46 	bl	80032b4 <FLASH_WaitForLastOperation>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800342c:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_FLASHEx_Erase+0xd4>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4a20      	ldr	r2, [pc, #128]	@ (80034b4 <HAL_FLASHEx_Erase+0xd4>)
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6113      	str	r3, [r2, #16]
 8003438:	e031      	b.n	800349e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800343a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800343e:	f7ff ff39 	bl	80032b4 <FLASH_WaitForLastOperation>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d12a      	bne.n	800349e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	e019      	b.n	800348c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f000 f849 	bl	80034f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800345e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003462:	f7ff ff27 	bl	80032b4 <FLASH_WaitForLastOperation>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800346a:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_FLASHEx_Erase+0xd4>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <HAL_FLASHEx_Erase+0xd4>)
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	601a      	str	r2, [r3, #0]
            break;
 8003482:	e00c      	b.n	800349e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800348a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	029a      	lsls	r2, r3, #10
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4413      	add	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3dc      	bcc.n	8003458 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <HAL_FLASHEx_Erase+0xd0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	761a      	strb	r2, [r3, #24]

  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000198 	.word	0x20000198
 80034b4:	40022000 	.word	0x40022000

080034b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034c0:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <FLASH_MassErase+0x30>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <FLASH_MassErase+0x34>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <FLASH_MassErase+0x34>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <FLASH_MassErase+0x34>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4a05      	ldr	r2, [pc, #20]	@ (80034ec <FLASH_MassErase+0x34>)
 80034d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034dc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	20000198 	.word	0x20000198
 80034ec:	40022000 	.word	0x40022000

080034f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <FLASH_PageErase+0x38>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <FLASH_PageErase+0x3c>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <FLASH_PageErase+0x3c>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800350a:	4a08      	ldr	r2, [pc, #32]	@ (800352c <FLASH_PageErase+0x3c>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003510:	4b06      	ldr	r3, [pc, #24]	@ (800352c <FLASH_PageErase+0x3c>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <FLASH_PageErase+0x3c>)
 8003516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800351a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000198 	.word	0x20000198
 800352c:	40022000 	.word	0x40022000

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b08b      	sub	sp, #44	@ 0x2c
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003542:	e169      	b.n	8003818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003544:	2201      	movs	r2, #1
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	f040 8158 	bne.w	8003812 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a9a      	ldr	r2, [pc, #616]	@ (80037d0 <HAL_GPIO_Init+0x2a0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d05e      	beq.n	800362a <HAL_GPIO_Init+0xfa>
 800356c:	4a98      	ldr	r2, [pc, #608]	@ (80037d0 <HAL_GPIO_Init+0x2a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d875      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 8003572:	4a98      	ldr	r2, [pc, #608]	@ (80037d4 <HAL_GPIO_Init+0x2a4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d058      	beq.n	800362a <HAL_GPIO_Init+0xfa>
 8003578:	4a96      	ldr	r2, [pc, #600]	@ (80037d4 <HAL_GPIO_Init+0x2a4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d86f      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 800357e:	4a96      	ldr	r2, [pc, #600]	@ (80037d8 <HAL_GPIO_Init+0x2a8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d052      	beq.n	800362a <HAL_GPIO_Init+0xfa>
 8003584:	4a94      	ldr	r2, [pc, #592]	@ (80037d8 <HAL_GPIO_Init+0x2a8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d869      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 800358a:	4a94      	ldr	r2, [pc, #592]	@ (80037dc <HAL_GPIO_Init+0x2ac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04c      	beq.n	800362a <HAL_GPIO_Init+0xfa>
 8003590:	4a92      	ldr	r2, [pc, #584]	@ (80037dc <HAL_GPIO_Init+0x2ac>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d863      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 8003596:	4a92      	ldr	r2, [pc, #584]	@ (80037e0 <HAL_GPIO_Init+0x2b0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d046      	beq.n	800362a <HAL_GPIO_Init+0xfa>
 800359c:	4a90      	ldr	r2, [pc, #576]	@ (80037e0 <HAL_GPIO_Init+0x2b0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d85d      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 80035a2:	2b12      	cmp	r3, #18
 80035a4:	d82a      	bhi.n	80035fc <HAL_GPIO_Init+0xcc>
 80035a6:	2b12      	cmp	r3, #18
 80035a8:	d859      	bhi.n	800365e <HAL_GPIO_Init+0x12e>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <HAL_GPIO_Init+0x80>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	0800362b 	.word	0x0800362b
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003617 	.word	0x08003617
 80035bc:	08003659 	.word	0x08003659
 80035c0:	0800365f 	.word	0x0800365f
 80035c4:	0800365f 	.word	0x0800365f
 80035c8:	0800365f 	.word	0x0800365f
 80035cc:	0800365f 	.word	0x0800365f
 80035d0:	0800365f 	.word	0x0800365f
 80035d4:	0800365f 	.word	0x0800365f
 80035d8:	0800365f 	.word	0x0800365f
 80035dc:	0800365f 	.word	0x0800365f
 80035e0:	0800365f 	.word	0x0800365f
 80035e4:	0800365f 	.word	0x0800365f
 80035e8:	0800365f 	.word	0x0800365f
 80035ec:	0800365f 	.word	0x0800365f
 80035f0:	0800365f 	.word	0x0800365f
 80035f4:	0800360d 	.word	0x0800360d
 80035f8:	08003621 	.word	0x08003621
 80035fc:	4a79      	ldr	r2, [pc, #484]	@ (80037e4 <HAL_GPIO_Init+0x2b4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003602:	e02c      	b.n	800365e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	623b      	str	r3, [r7, #32]
          break;
 800360a:	e029      	b.n	8003660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	3304      	adds	r3, #4
 8003612:	623b      	str	r3, [r7, #32]
          break;
 8003614:	e024      	b.n	8003660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	3308      	adds	r3, #8
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e01f      	b.n	8003660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	330c      	adds	r3, #12
 8003626:	623b      	str	r3, [r7, #32]
          break;
 8003628:	e01a      	b.n	8003660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003632:	2304      	movs	r3, #4
 8003634:	623b      	str	r3, [r7, #32]
          break;
 8003636:	e013      	b.n	8003660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003640:	2308      	movs	r3, #8
 8003642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	611a      	str	r2, [r3, #16]
          break;
 800364a:	e009      	b.n	8003660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800364c:	2308      	movs	r3, #8
 800364e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	615a      	str	r2, [r3, #20]
          break;
 8003656:	e003      	b.n	8003660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003658:	2300      	movs	r3, #0
 800365a:	623b      	str	r3, [r7, #32]
          break;
 800365c:	e000      	b.n	8003660 <HAL_GPIO_Init+0x130>
          break;
 800365e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2bff      	cmp	r3, #255	@ 0xff
 8003664:	d801      	bhi.n	800366a <HAL_GPIO_Init+0x13a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	e001      	b.n	800366e <HAL_GPIO_Init+0x13e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2bff      	cmp	r3, #255	@ 0xff
 8003674:	d802      	bhi.n	800367c <HAL_GPIO_Init+0x14c>
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	e002      	b.n	8003682 <HAL_GPIO_Init+0x152>
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	3b08      	subs	r3, #8
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	210f      	movs	r1, #15
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	431a      	orrs	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80b1 	beq.w	8003812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036b0:	4b4d      	ldr	r3, [pc, #308]	@ (80037e8 <HAL_GPIO_Init+0x2b8>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	4a4c      	ldr	r2, [pc, #304]	@ (80037e8 <HAL_GPIO_Init+0x2b8>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6193      	str	r3, [r2, #24]
 80036bc:	4b4a      	ldr	r3, [pc, #296]	@ (80037e8 <HAL_GPIO_Init+0x2b8>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036c8:	4a48      	ldr	r2, [pc, #288]	@ (80037ec <HAL_GPIO_Init+0x2bc>)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	3302      	adds	r3, #2
 80036d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	220f      	movs	r2, #15
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a40      	ldr	r2, [pc, #256]	@ (80037f0 <HAL_GPIO_Init+0x2c0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_GPIO_Init+0x1ec>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3f      	ldr	r2, [pc, #252]	@ (80037f4 <HAL_GPIO_Init+0x2c4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00d      	beq.n	8003718 <HAL_GPIO_Init+0x1e8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3e      	ldr	r2, [pc, #248]	@ (80037f8 <HAL_GPIO_Init+0x2c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <HAL_GPIO_Init+0x1e4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a3d      	ldr	r2, [pc, #244]	@ (80037fc <HAL_GPIO_Init+0x2cc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_GPIO_Init+0x1e0>
 800370c:	2303      	movs	r3, #3
 800370e:	e006      	b.n	800371e <HAL_GPIO_Init+0x1ee>
 8003710:	2304      	movs	r3, #4
 8003712:	e004      	b.n	800371e <HAL_GPIO_Init+0x1ee>
 8003714:	2302      	movs	r3, #2
 8003716:	e002      	b.n	800371e <HAL_GPIO_Init+0x1ee>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_GPIO_Init+0x1ee>
 800371c:	2300      	movs	r3, #0
 800371e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003720:	f002 0203 	and.w	r2, r2, #3
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	4093      	lsls	r3, r2
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800372e:	492f      	ldr	r1, [pc, #188]	@ (80037ec <HAL_GPIO_Init+0x2bc>)
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003748:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	492c      	ldr	r1, [pc, #176]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
 8003754:	e006      	b.n	8003764 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	43db      	mvns	r3, r3
 800375e:	4928      	ldr	r1, [pc, #160]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003760:	4013      	ands	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003770:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4922      	ldr	r1, [pc, #136]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	60cb      	str	r3, [r1, #12]
 800377c:	e006      	b.n	800378c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	43db      	mvns	r3, r3
 8003786:	491e      	ldr	r1, [pc, #120]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003788:	4013      	ands	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4918      	ldr	r1, [pc, #96]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	4914      	ldr	r1, [pc, #80]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d021      	beq.n	8003804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	490e      	ldr	r1, [pc, #56]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e021      	b.n	8003812 <HAL_GPIO_Init+0x2e2>
 80037ce:	bf00      	nop
 80037d0:	10320000 	.word	0x10320000
 80037d4:	10310000 	.word	0x10310000
 80037d8:	10220000 	.word	0x10220000
 80037dc:	10210000 	.word	0x10210000
 80037e0:	10120000 	.word	0x10120000
 80037e4:	10110000 	.word	0x10110000
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40010800 	.word	0x40010800
 80037f4:	40010c00 	.word	0x40010c00
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40011400 	.word	0x40011400
 8003800:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_GPIO_Init+0x304>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	43db      	mvns	r3, r3
 800380c:	4909      	ldr	r1, [pc, #36]	@ (8003834 <HAL_GPIO_Init+0x304>)
 800380e:	4013      	ands	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	3301      	adds	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	f47f ae8e 	bne.w	8003544 <HAL_GPIO_Init+0x14>
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	372c      	adds	r7, #44	@ 0x2c
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40010400 	.word	0x40010400

08003838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	e001      	b.n	800385a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	807b      	strh	r3, [r7, #2]
 8003872:	4613      	mov	r3, r2
 8003874:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003876:	787b      	ldrb	r3, [r7, #1]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003882:	e003      	b.n	800388c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	041a      	lsls	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	611a      	str	r2, [r3, #16]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
	...

08003898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e12b      	b.n	8003b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe ffce 	bl	8002860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	@ 0x24
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038fc:	f001 fbfc 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8003900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a81      	ldr	r2, [pc, #516]	@ (8003b0c <HAL_I2C_Init+0x274>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d807      	bhi.n	800391c <HAL_I2C_Init+0x84>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a80      	ldr	r2, [pc, #512]	@ (8003b10 <HAL_I2C_Init+0x278>)
 8003910:	4293      	cmp	r3, r2
 8003912:	bf94      	ite	ls
 8003914:	2301      	movls	r3, #1
 8003916:	2300      	movhi	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e006      	b.n	800392a <HAL_I2C_Init+0x92>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b14 <HAL_I2C_Init+0x27c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	bf94      	ite	ls
 8003924:	2301      	movls	r3, #1
 8003926:	2300      	movhi	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0e7      	b.n	8003b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a78      	ldr	r2, [pc, #480]	@ (8003b18 <HAL_I2C_Init+0x280>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9b      	lsrs	r3, r3, #18
 800393c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a6a      	ldr	r2, [pc, #424]	@ (8003b0c <HAL_I2C_Init+0x274>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d802      	bhi.n	800396c <HAL_I2C_Init+0xd4>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3301      	adds	r3, #1
 800396a:	e009      	b.n	8003980 <HAL_I2C_Init+0xe8>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	4a69      	ldr	r2, [pc, #420]	@ (8003b1c <HAL_I2C_Init+0x284>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	3301      	adds	r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003992:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	495c      	ldr	r1, [pc, #368]	@ (8003b0c <HAL_I2C_Init+0x274>)
 800399c:	428b      	cmp	r3, r1
 800399e:	d819      	bhi.n	80039d4 <HAL_I2C_Init+0x13c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e59      	subs	r1, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039b4:	400b      	ands	r3, r1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_I2C_Init+0x138>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1e59      	subs	r1, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	e051      	b.n	8003a74 <HAL_I2C_Init+0x1dc>
 80039d0:	2304      	movs	r3, #4
 80039d2:	e04f      	b.n	8003a74 <HAL_I2C_Init+0x1dc>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <HAL_I2C_Init+0x168>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e58      	subs	r0, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	440b      	add	r3, r1
 80039ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e012      	b.n	8003a26 <HAL_I2C_Init+0x18e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Init+0x196>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e022      	b.n	8003a74 <HAL_I2C_Init+0x1dc>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10e      	bne.n	8003a54 <HAL_I2C_Init+0x1bc>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e58      	subs	r0, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	440b      	add	r3, r1
 8003a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a52:	e00f      	b.n	8003a74 <HAL_I2C_Init+0x1dc>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e58      	subs	r0, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	0099      	lsls	r1, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	6809      	ldr	r1, [r1, #0]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aa2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6911      	ldr	r1, [r2, #16]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	4311      	orrs	r1, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	000186a0 	.word	0x000186a0
 8003b10:	001e847f 	.word	0x001e847f
 8003b14:	003d08ff 	.word	0x003d08ff
 8003b18:	431bde83 	.word	0x431bde83
 8003b1c:	10624dd3 	.word	0x10624dd3

08003b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	460b      	mov	r3, r1
 8003b34:	813b      	strh	r3, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3a:	f7ff f96f 	bl	8002e1c <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	f040 80d9 	bne.w	8003d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2319      	movs	r3, #25
 8003b54:	2201      	movs	r2, #1
 8003b56:	496d      	ldr	r1, [pc, #436]	@ (8003d0c <HAL_I2C_Mem_Write+0x1ec>)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fccd 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0cc      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Mem_Write+0x56>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0c5      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d007      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2221      	movs	r2, #33	@ 0x21
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2240      	movs	r2, #64	@ 0x40
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a4d      	ldr	r2, [pc, #308]	@ (8003d10 <HAL_I2C_Mem_Write+0x1f0>)
 8003bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bde:	88f8      	ldrh	r0, [r7, #6]
 8003be0:	893a      	ldrh	r2, [r7, #8]
 8003be2:	8979      	ldrh	r1, [r7, #10]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4603      	mov	r3, r0
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fb04 	bl	80041fc <I2C_RequestMemoryWrite>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d052      	beq.n	8003ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e081      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fd92 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11b      	bne.n	8003ca0 <HAL_I2C_Mem_Write+0x180>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1aa      	bne.n	8003bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fd85 	bl	80047bc <I2C_WaitOnBTFFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d107      	bne.n	8003cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e016      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	00100002 	.word	0x00100002
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	@ 0x30
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d32:	f7ff f873 	bl	8002e1c <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 8250 	bne.w	80041e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4982      	ldr	r1, [pc, #520]	@ (8003f58 <HAL_I2C_Mem_Read+0x244>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fbd1 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e243      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Mem_Read+0x5a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e23c      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2222      	movs	r2, #34	@ 0x22
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a62      	ldr	r2, [pc, #392]	@ (8003f5c <HAL_I2C_Mem_Read+0x248>)
 8003dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd6:	88f8      	ldrh	r0, [r7, #6]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4603      	mov	r3, r0
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa9e 	bl	8004328 <I2C_RequestMemoryRead>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1f8      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e1cc      	b.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d11e      	bne.n	8003e6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e3e:	b672      	cpsid	i
}
 8003e40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e68:	b662      	cpsie	i
}
 8003e6a:	e035      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11e      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e84:	b672      	cpsid	i
}
 8003e86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eae:	b662      	cpsie	i
}
 8003eb0:	e012      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ec0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ed8:	e172      	b.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	f200 811f 	bhi.w	8004122 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d123      	bne.n	8003f34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fcab 	bl	800484c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e173      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f32:	e145      	b.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d152      	bne.n	8003fe2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	2200      	movs	r2, #0
 8003f44:	4906      	ldr	r1, [pc, #24]	@ (8003f60 <HAL_I2C_Mem_Read+0x24c>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fad6 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e148      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
 8003f56:	bf00      	nop
 8003f58:	00100002 	.word	0x00100002
 8003f5c:	ffff0000 	.word	0xffff0000
 8003f60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f64:	b672      	cpsid	i
}
 8003f66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003faa:	b662      	cpsie	i
}
 8003fac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fe0:	e0ee      	b.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4981      	ldr	r1, [pc, #516]	@ (80041f0 <HAL_I2C_Mem_Read+0x4dc>)
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fa83 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0f5      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800400a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800400c:	b672      	cpsid	i
}
 800400e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004042:	4b6c      	ldr	r3, [pc, #432]	@ (80041f4 <HAL_I2C_Mem_Read+0x4e0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	4a6b      	ldr	r2, [pc, #428]	@ (80041f8 <HAL_I2C_Mem_Read+0x4e4>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a1a      	lsrs	r2, r3, #8
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00da      	lsls	r2, r3, #3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	3b01      	subs	r3, #1
 8004060:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d118      	bne.n	800409a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800408a:	b662      	cpsie	i
}
 800408c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0a6      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d1d9      	bne.n	800405c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040ea:	b662      	cpsie	i
}
 80040ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004120:	e04e      	b.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fb90 	bl	800484c <I2C_WaitOnRXNEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e058      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d124      	bne.n	80041c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f ae88 	bne.w	8003eda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	@ 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00010004 	.word	0x00010004
 80041f4:	20000008 	.word	0x20000008
 80041f8:	14f8b589 	.word	0x14f8b589

080041fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2200      	movs	r2, #0
 800422e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f960 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424c:	d103      	bne.n	8004256 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e05f      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	492d      	ldr	r1, [pc, #180]	@ (8004324 <I2C_RequestMemoryWrite+0x128>)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f9bb 	bl	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e04c      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fa46 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e02b      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c8:	893b      	ldrh	r3, [r7, #8]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e021      	b.n	8004318 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fa20 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e005      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00010002 	.word	0x00010002

08004328 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004360:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2200      	movs	r2, #0
 800436a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8c2 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004388:	d103      	bne.n	8004392 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004390:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0aa      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	4952      	ldr	r1, [pc, #328]	@ (80044f4 <I2C_RequestMemoryRead+0x1cc>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f91d 	bl	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e097      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f9a8 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e076      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004404:	893b      	ldrh	r3, [r7, #8]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]
 800440e:	e021      	b.n	8004454 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	b29b      	uxth	r3, r3
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004420:	6a39      	ldr	r1, [r7, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f982 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b04      	cmp	r3, #4
 8004434:	d107      	bne.n	8004446 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004444:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e050      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	6a39      	ldr	r1, [r7, #32]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f967 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2b04      	cmp	r3, #4
 800446a:	d107      	bne.n	800447c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e035      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800448e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2200      	movs	r2, #0
 8004498:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f82b 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b6:	d103      	bne.n	80044c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e013      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	4906      	ldr	r1, [pc, #24]	@ (80044f4 <I2C_RequestMemoryRead+0x1cc>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f886 	bl	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00010002 	.word	0x00010002

080044f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004508:	e048      	b.n	800459c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d044      	beq.n	800459c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe fc83 	bl	8002e1c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d139      	bne.n	800459c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10d      	bne.n	800454e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	43da      	mvns	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4013      	ands	r3, r2
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	e00c      	b.n	8004568 <I2C_WaitOnFlagUntilTimeout+0x70>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	43da      	mvns	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4013      	ands	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	429a      	cmp	r2, r3
 800456c:	d116      	bne.n	800459c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e023      	b.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10d      	bne.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	43da      	mvns	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	e00c      	b.n	80045dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d093      	beq.n	800450a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045fa:	e071      	b.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460a:	d123      	bne.n	8004654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e067      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d041      	beq.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fe fbde 	bl	8002e1c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d136      	bne.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10c      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	43da      	mvns	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e00b      	b.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	43da      	mvns	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e021      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d10c      	bne.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	43da      	mvns	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e00b      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	43da      	mvns	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f af6d 	bne.w	80045fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	e034      	b.n	80047a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8e3 	bl	8004906 <I2C_IsAcknowledgeFailed>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e034      	b.n	80047b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d028      	beq.n	80047a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fe fb63 	bl	8002e1c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11d      	bne.n	80047a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b80      	cmp	r3, #128	@ 0x80
 8004774:	d016      	beq.n	80047a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	d1c3      	bne.n	800473a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c8:	e034      	b.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f89b 	bl	8004906 <I2C_IsAcknowledgeFailed>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e034      	b.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d028      	beq.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fb1b 	bl	8002e1c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b04      	cmp	r3, #4
 8004804:	d016      	beq.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e007      	b.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d1c3      	bne.n	80047ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004858:	e049      	b.n	80048ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d119      	bne.n	800489c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0210 	mvn.w	r2, #16
 8004870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e030      	b.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fe fabe 	bl	8002e1c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d016      	beq.n	80048ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e007      	b.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d1ae      	bne.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491c:	d11b      	bne.n	8004956 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004926:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
	...

08004964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e272      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8087 	beq.w	8004a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004984:	4b92      	ldr	r3, [pc, #584]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b04      	cmp	r3, #4
 800498e:	d00c      	beq.n	80049aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004990:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d112      	bne.n	80049c2 <HAL_RCC_OscConfig+0x5e>
 800499c:	4b8c      	ldr	r3, [pc, #560]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a8:	d10b      	bne.n	80049c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049aa:	4b89      	ldr	r3, [pc, #548]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x12c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d168      	bne.n	8004a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e24c      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x76>
 80049cc:	4b80      	ldr	r3, [pc, #512]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e02e      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x98>
 80049e2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7a      	ldr	r2, [pc, #488]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4b78      	ldr	r3, [pc, #480]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a77      	ldr	r2, [pc, #476]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0xbc>
 8004a06:	4b72      	ldr	r3, [pc, #456]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a71      	ldr	r2, [pc, #452]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6e      	ldr	r2, [pc, #440]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xd4>
 8004a20:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a6a      	ldr	r2, [pc, #424]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b68      	ldr	r3, [pc, #416]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a67      	ldr	r2, [pc, #412]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fe f9ec 	bl	8002e1c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fe f9e8 	bl	8002e1c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	@ 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e200      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xe4>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fe f9d8 	bl	8002e1c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fe f9d4 	bl	8002e1c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	@ 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1ec      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	4b53      	ldr	r3, [pc, #332]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x10c>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d063      	beq.n	8004b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aaa:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x18c>
 8004ab6:	4b46      	ldr	r3, [pc, #280]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x176>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1c0      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4939      	ldr	r1, [pc, #228]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	e03a      	b.n	8004b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <HAL_RCC_OscConfig+0x270>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fe f98d 	bl	8002e1c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fe f989 	bl	8002e1c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1a1      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4927      	ldr	r1, [pc, #156]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b26      	ldr	r3, [pc, #152]	@ (8004bd4 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe f96c 	bl	8002e1c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fe f968 	bl	8002e1c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e180      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03a      	beq.n	8004be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d019      	beq.n	8004bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7a:	4b17      	ldr	r3, [pc, #92]	@ (8004bd8 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b80:	f7fe f94c 	bl	8002e1c <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fe f948 	bl	8002e1c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e160      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f000 faba 	bl	8005120 <RCC_Delay>
 8004bac:	e01c      	b.n	8004be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bae:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <HAL_RCC_OscConfig+0x274>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb4:	f7fe f932 	bl	8002e1c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bba:	e00f      	b.n	8004bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbc:	f7fe f92e 	bl	8002e1c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d908      	bls.n	8004bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e146      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	42420000 	.word	0x42420000
 8004bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b92      	ldr	r3, [pc, #584]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e9      	bne.n	8004bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a6 	beq.w	8004d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	4b88      	ldr	r3, [pc, #544]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4a87      	ldr	r2, [pc, #540]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	61d3      	str	r3, [r2, #28]
 8004c12:	4b85      	ldr	r3, [pc, #532]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	4b82      	ldr	r3, [pc, #520]	@ (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7e      	ldr	r2, [pc, #504]	@ (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe f8ef 	bl	8002e1c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fe f8eb 	bl	8002e1c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b64      	cmp	r3, #100	@ 0x64
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e103      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	4b75      	ldr	r3, [pc, #468]	@ (8004e2c <HAL_RCC_OscConfig+0x4c8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x312>
 8004c68:	4b6f      	ldr	r3, [pc, #444]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6213      	str	r3, [r2, #32]
 8004c74:	e02d      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x334>
 8004c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a69      	ldr	r2, [pc, #420]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	4b67      	ldr	r3, [pc, #412]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4a66      	ldr	r2, [pc, #408]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
 8004c96:	e01c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCC_OscConfig+0x356>
 8004ca0:	4b61      	ldr	r3, [pc, #388]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4a60      	ldr	r2, [pc, #384]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6213      	str	r3, [r2, #32]
 8004cac:	4b5e      	ldr	r3, [pc, #376]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6213      	str	r3, [r2, #32]
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x36e>
 8004cba:	4b5b      	ldr	r3, [pc, #364]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6213      	str	r3, [r2, #32]
 8004cc6:	4b58      	ldr	r3, [pc, #352]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	4a57      	ldr	r2, [pc, #348]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fe f89f 	bl	8002e1c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fe f89b 	bl	8002e1c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0b1      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x37e>
 8004d04:	e014      	b.n	8004d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d06:	f7fe f889 	bl	8002e1c <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe f885 	bl	8002e1c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e09b      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d24:	4b40      	ldr	r3, [pc, #256]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d105      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d36:	4b3c      	ldr	r3, [pc, #240]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8087 	beq.w	8004e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d061      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d146      	bne.n	8004dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b33      	ldr	r3, [pc, #204]	@ (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fe f859 	bl	8002e1c <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fe f855 	bl	8002e1c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e06d      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d80:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d94:	d108      	bne.n	8004da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d96:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4921      	ldr	r1, [pc, #132]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a19      	ldr	r1, [r3, #32]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	430b      	orrs	r3, r1
 8004dba:	491b      	ldr	r1, [pc, #108]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fe f829 	bl	8002e1c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fe f825 	bl	8002e1c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e03d      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x46a>
 8004dec:	e035      	b.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dee:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <HAL_RCC_OscConfig+0x4cc>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fe f812 	bl	8002e1c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe f80e 	bl	8002e1c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e026      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0e:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x498>
 8004e1a:	e01e      	b.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e019      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCC_OscConfig+0x500>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0d0      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d910      	bls.n	8004eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b67      	ldr	r3, [pc, #412]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 0207 	bic.w	r2, r3, #7
 8004e92:	4965      	ldr	r1, [pc, #404]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b63      	ldr	r3, [pc, #396]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0b8      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec4:	4b59      	ldr	r3, [pc, #356]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a58      	ldr	r2, [pc, #352]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004edc:	4b53      	ldr	r3, [pc, #332]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4a52      	ldr	r2, [pc, #328]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee8:	4b50      	ldr	r3, [pc, #320]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	494d      	ldr	r1, [pc, #308]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d040      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b47      	ldr	r3, [pc, #284]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07f      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e073      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06b      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4936      	ldr	r1, [pc, #216]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f58:	f7fd ff60 	bl	8002e1c <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fd ff5c 	bl	8002e1c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e053      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d210      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b24      	ldr	r3, [pc, #144]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 0207 	bic.w	r2, r3, #7
 8004f9e:	4922      	ldr	r1, [pc, #136]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e032      	b.n	800501e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b19      	ldr	r3, [pc, #100]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4916      	ldr	r1, [pc, #88]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	490e      	ldr	r1, [pc, #56]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ff6:	f000 f821 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	490a      	ldr	r1, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <HAL_RCC_ClockConfig+0x1cc>)
 8005010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005012:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x1d0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd febe 	bl	8002d98 <HAL_InitTick>

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40021000 	.word	0x40021000
 8005030:	08006000 	.word	0x08006000
 8005034:	20000008 	.word	0x20000008
 8005038:	2000000c 	.word	0x2000000c

0800503c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005056:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b04      	cmp	r3, #4
 8005064:	d002      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x30>
 8005066:	2b08      	cmp	r3, #8
 8005068:	d003      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x36>
 800506a:	e027      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800506c:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800506e:	613b      	str	r3, [r7, #16]
      break;
 8005070:	e027      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	0c9b      	lsrs	r3, r3, #18
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	4a17      	ldr	r2, [pc, #92]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
 800507e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800508a:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	0c5b      	lsrs	r3, r3, #17
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	4a11      	ldr	r2, [pc, #68]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800509e:	fb03 f202 	mul.w	r2, r3, r2
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e004      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0c      	ldr	r2, [pc, #48]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80050b0:	fb02 f303 	mul.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	613b      	str	r3, [r7, #16]
      break;
 80050ba:	e002      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050bc:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80050be:	613b      	str	r3, [r7, #16]
      break;
 80050c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050c2:	693b      	ldr	r3, [r7, #16]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	007a1200 	.word	0x007a1200
 80050d8:	08006018 	.word	0x08006018
 80050dc:	08006028 	.word	0x08006028
 80050e0:	003d0900 	.word	0x003d0900

080050e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b02      	ldr	r3, [pc, #8]	@ (80050f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	20000008 	.word	0x20000008

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050fc:	f7ff fff2 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	@ (800511c <HAL_RCC_GetPCLK1Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	08006010 	.word	0x08006010

08005120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <RCC_Delay+0x34>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <RCC_Delay+0x38>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0a5b      	lsrs	r3, r3, #9
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800513c:	bf00      	nop
  }
  while (Delay --);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	60fa      	str	r2, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f9      	bne.n	800513c <RCC_Delay+0x1c>
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	20000008 	.word	0x20000008
 8005158:	10624dd3 	.word	0x10624dd3

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e041      	b.n	80051f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fd fbbc 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 fc52 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e03a      	b.n	800528a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a18      	ldr	r2, [pc, #96]	@ (8005294 <HAL_TIM_Base_Start_IT+0x98>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x58>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x58>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a14      	ldr	r2, [pc, #80]	@ (8005298 <HAL_TIM_Base_Start_IT+0x9c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x58>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a13      	ldr	r2, [pc, #76]	@ (800529c <HAL_TIM_Base_Start_IT+0xa0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e007      	b.n	8005288 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800

080052a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f839 	bl	800533e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 fbb0 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <HAL_TIM_IC_Start_IT+0x1e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e013      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x46>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d104      	bne.n	800537e <HAL_TIM_IC_Start_IT+0x2e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800537a:	b2db      	uxtb	r3, r3
 800537c:	e00b      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x46>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d104      	bne.n	800538e <HAL_TIM_IC_Start_IT+0x3e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e003      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x46>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_TIM_IC_Start_IT+0x58>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e013      	b.n	80053d0 <HAL_TIM_IC_Start_IT+0x80>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d104      	bne.n	80053b8 <HAL_TIM_IC_Start_IT+0x68>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e00b      	b.n	80053d0 <HAL_TIM_IC_Start_IT+0x80>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d104      	bne.n	80053c8 <HAL_TIM_IC_Start_IT+0x78>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e003      	b.n	80053d0 <HAL_TIM_IC_Start_IT+0x80>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d8:	7b7b      	ldrb	r3, [r7, #13]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0b8      	b.n	8005554 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_IC_Start_IT+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f0:	e013      	b.n	800541a <HAL_TIM_IC_Start_IT+0xca>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_IC_Start_IT+0xb2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005400:	e00b      	b.n	800541a <HAL_TIM_IC_Start_IT+0xca>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d104      	bne.n	8005412 <HAL_TIM_IC_Start_IT+0xc2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005410:	e003      	b.n	800541a <HAL_TIM_IC_Start_IT+0xca>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <HAL_TIM_IC_Start_IT+0xda>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005428:	e013      	b.n	8005452 <HAL_TIM_IC_Start_IT+0x102>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d104      	bne.n	800543a <HAL_TIM_IC_Start_IT+0xea>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005438:	e00b      	b.n	8005452 <HAL_TIM_IC_Start_IT+0x102>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d104      	bne.n	800544a <HAL_TIM_IC_Start_IT+0xfa>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005448:	e003      	b.n	8005452 <HAL_TIM_IC_Start_IT+0x102>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d841      	bhi.n	80054dc <HAL_TIM_IC_Start_IT+0x18c>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_TIM_IC_Start_IT+0x110>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005495 	.word	0x08005495
 8005464:	080054dd 	.word	0x080054dd
 8005468:	080054dd 	.word	0x080054dd
 800546c:	080054dd 	.word	0x080054dd
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054dd 	.word	0x080054dd
 8005478:	080054dd 	.word	0x080054dd
 800547c:	080054dd 	.word	0x080054dd
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054dd 	.word	0x080054dd
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054cb 	.word	0x080054cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0202 	orr.w	r2, r2, #2
 80054a2:	60da      	str	r2, [r3, #12]
      break;
 80054a4:	e01d      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0204 	orr.w	r2, r2, #4
 80054b4:	60da      	str	r2, [r3, #12]
      break;
 80054b6:	e014      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0208 	orr.w	r2, r2, #8
 80054c6:	60da      	str	r2, [r3, #12]
      break;
 80054c8:	e00b      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0210 	orr.w	r2, r2, #16
 80054d8:	60da      	str	r2, [r3, #12]
      break;
 80054da:	e002      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d134      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fcb8 	bl	8005e66 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_TIM_IC_Start_IT+0x20c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIM_IC_Start_IT+0x1ce>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d009      	beq.n	800551e <HAL_TIM_IC_Start_IT+0x1ce>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a14      	ldr	r2, [pc, #80]	@ (8005560 <HAL_TIM_IC_Start_IT+0x210>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIM_IC_Start_IT+0x1ce>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a12      	ldr	r2, [pc, #72]	@ (8005564 <HAL_TIM_IC_Start_IT+0x214>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d111      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b06      	cmp	r3, #6
 800552e:	d010      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005540:	e007      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d020      	beq.n	80055cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0202 	mvn.w	r2, #2
 800559c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fd fa7c 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa27 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa2d 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0204 	mvn.w	r2, #4
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fd fa56 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa01 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fa07 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d020      	beq.n	8005664 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0208 	mvn.w	r2, #8
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2204      	movs	r2, #4
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fd fa30 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9db 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9e1 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	d020      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01b      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0210 	mvn.w	r2, #16
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2208      	movs	r2, #8
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd fa0a 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9b5 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9bb 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0201 	mvn.w	r2, #1
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd fa4c 	bl	8002b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fc43 	bl	8005f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f98b 	bl	8005a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0220 	mvn.w	r2, #32
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fc16 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005762:	2302      	movs	r3, #2
 8005764:	e088      	b.n	8005878 <HAL_TIM_IC_ConfigChannel+0x130>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005784:	f000 f9cc 	bl	8005b20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 020c 	bic.w	r2, r2, #12
 8005796:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6999      	ldr	r1, [r3, #24]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	e060      	b.n	800586e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d11c      	bne.n	80057ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80057c2:	f000 fa35 	bl	8005c30 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6999      	ldr	r1, [r3, #24]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	021a      	lsls	r2, r3, #8
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	619a      	str	r2, [r3, #24]
 80057ea:	e040      	b.n	800586e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d11b      	bne.n	800582a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005802:	f000 fa80 	bl	8005d06 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 020c 	bic.w	r2, r2, #12
 8005814:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	61da      	str	r2, [r3, #28]
 8005828:	e021      	b.n	800586e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d11c      	bne.n	800586a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005840:	f000 fa9c 	bl	8005d7c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005852:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69d9      	ldr	r1, [r3, #28]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
 8005868:	e001      	b.n	800586e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0b4      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x186>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d4:	d03e      	beq.n	8005954 <HAL_TIM_ConfigClockSource+0xd4>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058da:	f200 8087 	bhi.w	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e2:	f000 8086 	beq.w	80059f2 <HAL_TIM_ConfigClockSource+0x172>
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ea:	d87f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b70      	cmp	r3, #112	@ 0x70
 80058ee:	d01a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xa6>
 80058f0:	2b70      	cmp	r3, #112	@ 0x70
 80058f2:	d87b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b60      	cmp	r3, #96	@ 0x60
 80058f6:	d050      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x11a>
 80058f8:	2b60      	cmp	r3, #96	@ 0x60
 80058fa:	d877      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b50      	cmp	r3, #80	@ 0x50
 80058fe:	d03c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xfa>
 8005900:	2b50      	cmp	r3, #80	@ 0x50
 8005902:	d873      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	d058      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x13a>
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d86f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b30      	cmp	r3, #48	@ 0x30
 800590e:	d064      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b30      	cmp	r3, #48	@ 0x30
 8005912:	d86b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d060      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d867      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d05a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	e062      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	f000 fa77 	bl	8005e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	609a      	str	r2, [r3, #8]
      break;
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005964:	f000 fa60 	bl	8005e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005976:	609a      	str	r2, [r3, #8]
      break;
 8005978:	e03c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	461a      	mov	r2, r3
 8005988:	f000 f924 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2150      	movs	r1, #80	@ 0x50
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fa2e 	bl	8005df4 <TIM_ITRx_SetConfig>
      break;
 8005998:	e02c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 f97e 	bl	8005ca8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2160      	movs	r1, #96	@ 0x60
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fa1e 	bl	8005df4 <TIM_ITRx_SetConfig>
      break;
 80059b8:	e01c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 f904 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2140      	movs	r1, #64	@ 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa0e 	bl	8005df4 <TIM_ITRx_SetConfig>
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 fa05 	bl	8005df4 <TIM_ITRx_SetConfig>
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a2f      	ldr	r2, [pc, #188]	@ (8005b14 <TIM_Base_SetConfig+0xd0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x30>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x30>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <TIM_Base_SetConfig+0xd4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x30>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <TIM_Base_SetConfig+0xd8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a22      	ldr	r2, [pc, #136]	@ (8005b14 <TIM_Base_SetConfig+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x62>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a94:	d007      	beq.n	8005aa6 <TIM_Base_SetConfig+0x62>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	@ (8005b18 <TIM_Base_SetConfig+0xd4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_Base_SetConfig+0x62>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b1c <TIM_Base_SetConfig+0xd8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	@ (8005b14 <TIM_Base_SetConfig+0xd0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800

08005b20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f023 0201 	bic.w	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <TIM_TI1_SetConfig+0xa8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_TI1_SetConfig+0x46>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b54:	d007      	beq.n	8005b66 <TIM_TI1_SetConfig+0x46>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <TIM_TI1_SetConfig+0xac>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_TI1_SetConfig+0x46>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd0 <TIM_TI1_SetConfig+0xb0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <TIM_TI1_SetConfig+0x4a>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <TIM_TI1_SetConfig+0x4c>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e003      	b.n	8005b8a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f003 030a 	and.w	r3, r3, #10
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f023 0210 	bic.w	r2, r3, #16
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	031b      	lsls	r3, r3, #12
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0210 	bic.w	r2, r3, #16
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	031b      	lsls	r3, r3, #12
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	031b      	lsls	r3, r3, #12
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f043 0307 	orr.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	609a      	str	r2, [r3, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	2201      	movs	r2, #1
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	401a      	ands	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e046      	b.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00e      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f14:	d009      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a12      	ldr	r2, [pc, #72]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a10      	ldr	r2, [pc, #64]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d10c      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <memset>:
 8005f90:	4603      	mov	r3, r0
 8005f92:	4402      	add	r2, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d100      	bne.n	8005f9a <memset+0xa>
 8005f98:	4770      	bx	lr
 8005f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9e:	e7f9      	b.n	8005f94 <memset+0x4>

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	4d0c      	ldr	r5, [pc, #48]	@ (8005fd8 <__libc_init_array+0x38>)
 8005fa6:	4c0d      	ldr	r4, [pc, #52]	@ (8005fdc <__libc_init_array+0x3c>)
 8005fa8:	1b64      	subs	r4, r4, r5
 8005faa:	10a4      	asrs	r4, r4, #2
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	f000 f81a 	bl	8005fe8 <_init>
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	4d0a      	ldr	r5, [pc, #40]	@ (8005fe0 <__libc_init_array+0x40>)
 8005fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8005fe4 <__libc_init_array+0x44>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	0800602c 	.word	0x0800602c
 8005fdc:	0800602c 	.word	0x0800602c
 8005fe0:	0800602c 	.word	0x0800602c
 8005fe4:	08006030 	.word	0x08006030

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
